"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ö–æ–∫–∫–µ–π–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
"""
from typing import List, Dict, Optional, Tuple
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func

from data.models import Product, Batch


class GearService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ö–æ–∫–∫–µ–π–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""

    # === –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ü–û–î–ë–û–†–ê ===
    POSITIONS = {
        'goalie': '–í—Ä–∞—Ç–∞—Ä—å',
        'defender': '–ó–∞—â–∏—Ç–Ω–∏–∫', 
        'forward': '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
        'all': '–õ—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è'
    }
    
    SKILL_LEVELS = {
        'beginner': '–ù–æ–≤–∏—á–æ–∫',
        'amateur': '–õ—é–±–∏—Ç–µ–ª—å',
        'professional': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
    }
    
    AGE_GROUPS = {
        'kids': '–î–µ—Ç–∏ (–¥–æ 12 –ª–µ—Ç)',
        'youth': '–Æ–Ω–∏–æ—Ä—ã (13-17 –ª–µ—Ç)',
        'adult': '–í–∑—Ä–æ—Å–ª—ã–µ (18+)'
    }

    # === –ì–û–¢–û–í–´–ï –ö–û–ú–ü–õ–ï–ö–¢–´ ===
    GEAR_KITS = {
        'goalie_full': {
            'name': '–ü–æ–ª–Ω–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –≤—Ä–∞—Ç–∞—Ä—è',
            'description': '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è',
            'items': ['—à–ª–µ–º', '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–±–ª–æ–∫–µ—Ä', '–ª–æ–≤—É—à–∫–∞', '–ø–∞–Ω—Ç—ã', '—â–∏—Ç–∫–∏'],
            'position': 'goalie'
        },
        'player_basic': {
            'name': '–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –∏–≥—Ä–æ–∫–∞',
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞',
            'items': ['—à–ª–µ–º', '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', '–ø–µ—Ä—á–∞—Ç–∫–∏', '–ø–∞–Ω—Ç—ã'],
            'position': 'all'
        },
        'player_pro': {
            'name': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç',
            'description': '–ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
            'items': ['—à–ª–µ–º', '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', '–ø–µ—Ä—á–∞—Ç–∫–∏', '–ø–∞–Ω—Ç—ã', '—â–∏—Ç–∫–∏', '—Ä–∞–∫—É—à–∫–∞'],
            'position': 'all'
        }
    }

    @staticmethod
    def get_gear_questionnaire() -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
        return {
            'position': {
                'question': 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞:',
                'options': GearService.POSITIONS,
                'required': True
            },
            'skill_level': {
                'question': 'üèÜ –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã:',
                'options': GearService.SKILL_LEVELS,
                'required': True
            },
            'age_group': {
                'question': 'üë§ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:',
                'options': GearService.AGE_GROUPS,
                'required': True
            },
            'budget': {
                'question': 'üí∞ –ë—é–¥–∂–µ—Ç (–≤ —Ä—É–±–ª—è—Ö):',
                'type': 'number',
                'required': False
            },
            'size_preferences': {
                'question': 'üìè –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É?',
                'type': 'text',
                'required': False
            }
        }

    @staticmethod
    def get_gear_kits() -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
        return GearService.GEAR_KITS

    @staticmethod
    def search_gear_by_kit(db: Session, kit_id: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞"""
        if kit_id not in GearService.GEAR_KITS:
            return []
        
        kit = GearService.GEAR_KITS[kit_id]
        items = kit['items']
        
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        products = []
        for item in items:
            query = db.query(Product).join(Batch).filter(
                and_(
                    Product.quantity > 0,
                    or_(
                        func.lower(Product.name).contains(func.lower(item)),
                        func.lower(Product.name).contains('—Ö–æ–∫–∫–µ–π'),
                        func.lower(Product.name).contains('hockey')
                    )
                )
            ).limit(5).all()
            
            for product in query:
                products.append({
                    'id': product.id,
                    'name': product.name,
                    'size': product.size,
                    'age': product.age,
                    'price': product.retail_price or product.price_eur,
                    'stock': product.quantity,
                    'warehouse': product.batch.warehouse,
                    'category': item
                })
        
        return products

    @staticmethod
    def search_gear_by_questionnaire(db: Session, answers: Dict) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –æ—Ç–≤–µ—Ç–∞–º –∞–Ω–∫–µ—Ç—ã"""
        position = answers.get('position', 'all')
        skill_level = answers.get('skill_level', 'amateur')
        age_group = answers.get('age_group', 'adult')
        budget = answers.get('budget')
        
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filters = [Product.quantity > 0]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        if age_group == 'kids':
            filters.append(Product.age.in_(['kids', 'youth']))
        elif age_group == 'youth':
            filters.append(Product.age.in_(['youth', 'adult']))
        elif age_group == 'adult':
            filters.append(Product.age == 'adult')
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        if position != 'all':
            position_keywords = {
                'goalie': ['–≤—Ä–∞—Ç–∞—Ä—å', 'goalie', '–±–ª–æ–∫–µ—Ä', '–ª–æ–≤—É—à–∫–∞', '—â–∏—Ç–∫–∏'],
                'defender': ['–∑–∞—â–∏—Ç–Ω–∏–∫', 'defender', '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫'],
                'forward': ['–Ω–∞–ø–∞–¥–∞—é—â–∏–π', 'forward', '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏']
            }
            
            if position in position_keywords:
                keywords = position_keywords[position]
                name_filters = []
                for keyword in keywords:
                    name_filters.append(func.lower(Product.name).contains(func.lower(keyword)))
                filters.append(or_(*name_filters))
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
        if budget:
            filters.append(Product.retail_price <= budget)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é (–∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞)
        quality_filters = {
            'beginner': ['–±–∞–∑–æ–≤—ã–π', '–Ω–∞—á–∞–ª—å–Ω—ã–π', 'basic'],
            'amateur': ['–ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π', 'amateur', '—Å—Ä–µ–¥–Ω–∏–π'],
            'professional': ['–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', 'pro', 'elite']
        }
        
        if skill_level in quality_filters:
            keywords = quality_filters[skill_level]
            quality_name_filters = []
            for keyword in keywords:
                quality_name_filters.append(func.lower(Product.name).contains(func.lower(keyword)))
            filters.append(or_(*quality_name_filters))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        query = db.query(Product).join(Batch).filter(and_(*filters))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        products = query.all()
        categorized = {}
        
        for product in products:
            category = GearService._categorize_product(product.name)
            if category not in categorized:
                categorized[category] = []
            
            categorized[category].append({
                'id': product.id,
                'name': product.name,
                'size': product.size,
                'age': product.age,
                'price': product.retail_price or product.price_eur,
                'stock': product.quantity,
                'warehouse': product.batch.warehouse,
                'category': category
            })
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result = []
        for category, items in categorized.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –∏ –±–µ—Ä–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            sorted_items = sorted(items, key=lambda x: x['price'])
            result.extend(sorted_items[:3])  # –¢–æ–ø-3 –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        return result

    @staticmethod
    def _categorize_product(name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        name_lower = name.lower()
        
        if any(word in name_lower for word in ['—à–ª–µ–º', 'helmet']):
            return '—à–ª–µ–º'
        elif any(word in name_lower for word in ['–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', 'chest']):
            return '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫'
        elif any(word in name_lower for word in ['–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', 'elbow']):
            return '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏'
        elif any(word in name_lower for word in ['–ø–µ—Ä—á–∞—Ç–∫–∏', 'glove']):
            return '–ø–µ—Ä—á–∞—Ç–∫–∏'
        elif any(word in name_lower for word in ['–ø–∞–Ω—Ç—ã', 'pant']):
            return '–ø–∞–Ω—Ç—ã'
        elif any(word in name_lower for word in ['—â–∏—Ç–∫–∏', 'shin']):
            return '—â–∏—Ç–∫–∏'
        elif any(word in name_lower for word in ['–±–ª–æ–∫–µ—Ä', 'blocker']):
            return '–±–ª–æ–∫–µ—Ä'
        elif any(word in name_lower for word in ['–ª–æ–≤—É—à–∫–∞', 'catch']):
            return '–ª–æ–≤—É—à–∫–∞'
        elif any(word in name_lower for word in ['—Ä–∞–∫—É—à–∫–∞', 'cup']):
            return '—Ä–∞–∫—É—à–∫–∞'
        else:
            return '–¥—Ä—É–≥–æ–µ'

    @staticmethod
    def get_gear_recommendations(db: Session, product_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Ç–æ–≤–∞—Ä–∞–º"""
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            return []
        
        category = GearService._categorize_product(product.name)
        
        # –ò—â–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã
        compatible_categories = {
            '—à–ª–µ–º': ['–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏'],
            '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫': ['—à–ª–µ–º', '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', '–ø–µ—Ä—á–∞—Ç–∫–∏'],
            '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏': ['–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–ø–µ—Ä—á–∞—Ç–∫–∏', '–ø–∞–Ω—Ç—ã'],
            '–ø–µ—Ä—á–∞—Ç–∫–∏': ['–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', '–ø–∞–Ω—Ç—ã'],
            '–ø–∞–Ω—Ç—ã': ['–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', '—â–∏—Ç–∫–∏'],
            '—â–∏—Ç–∫–∏': ['–ø–∞–Ω—Ç—ã']
        }
        
        if category not in compatible_categories:
            return []
        
        compatible = []
        for comp_category in compatible_categories[category]:
            items = GearService._search_by_category(db, comp_category, product.age, product.size)
            compatible.extend(items[:2])  # –¢–æ–ø-2 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–∞
        
        return compatible

    @staticmethod
    def _search_by_category(db: Session, category: str, age: str, size: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞"""
        query = db.query(Product).join(Batch).filter(
            and_(
                Product.quantity > 0,
                Product.age == age,
                Product.size == size
            )
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_keywords = {
            '—à–ª–µ–º': ['—à–ª–µ–º', 'helmet'],
            '–Ω–∞–≥—Ä—É–¥–Ω–∏–∫': ['–Ω–∞–≥—Ä—É–¥–Ω–∏–∫', 'chest'],
            '–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏': ['–Ω–∞–ª–æ–∫–æ—Ç–Ω–∏–∫–∏', 'elbow'],
            '–ø–µ—Ä—á–∞—Ç–∫–∏': ['–ø–µ—Ä—á–∞—Ç–∫–∏', 'glove'],
            '–ø–∞–Ω—Ç—ã': ['–ø–∞–Ω—Ç—ã', 'pant'],
            '—â–∏—Ç–∫–∏': ['—â–∏—Ç–∫–∏', 'shin']
        }
        
        if category in category_keywords:
            keywords = category_keywords[category]
            name_filters = []
            for keyword in keywords:
                name_filters.append(func.lower(Product.name).contains(func.lower(keyword)))
            query = query.filter(or_(*name_filters))
        
        products = query.limit(5).all()
        
        return [{
            'id': p.id,
            'name': p.name,
            'price': p.retail_price or p.price_eur,
            'stock': p.quantity,
            'category': category
        } for p in products]
