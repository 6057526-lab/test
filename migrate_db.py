#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î
"""
import sqlite3
from pathlib import Path
from data.db import DATABASE_URL, init_db


def migrate_database():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ EAN –≤ —Ä–∞–º–∫–∞—Ö –ø–∞—Ä—Ç–∏–∏"""

    # –ü—É—Ç—å –∫ –ë–î
    db_path = DATABASE_URL.replace('sqlite:///', '')

    if not Path(db_path).exists():
        print("‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        init_db()
        return

    print("üîß –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ë–î...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        cursor.execute("""
            SELECT sql FROM sqlite_master 
            WHERE type='table' AND name='products'
        """)
        table_sql = cursor.fetchone()[0]

        if 'unique_ean_per_batch' not in table_sql:
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ EAN –≤ —Ä–∞–º–∫–∞—Ö –ø–∞—Ä—Ç–∏–∏...")

            # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ALTER TABLE ADD CONSTRAINT
            # –ü–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º

            # 1. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("ALTER TABLE products RENAME TO products_old")

            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            cursor.execute("""
                CREATE TABLE products (
                    id INTEGER NOT NULL PRIMARY KEY,
                    ean VARCHAR(13) NOT NULL,
                    name VARCHAR(200) NOT NULL,
                    model VARCHAR(100),
                    color VARCHAR(50),
                    size VARCHAR(20),
                    age VARCHAR(20),
                    fit VARCHAR(20),
                    weight FLOAT NOT NULL,
                    quantity INTEGER NOT NULL,
                    price_eur FLOAT NOT NULL,
                    exchange_rate FLOAT NOT NULL,
                    coefficient FLOAT NOT NULL,
                    logistics_per_kg FLOAT NOT NULL,
                    cost_price FLOAT NOT NULL,
                    retail_price FLOAT,
                    batch_id INTEGER NOT NULL,
                    FOREIGN KEY(batch_id) REFERENCES batches (id),
                    CONSTRAINT unique_ean_per_batch UNIQUE (ean, batch_id),
                    CONSTRAINT check_quantity_positive CHECK (quantity >= 0),
                    CONSTRAINT check_price_positive CHECK (price_eur >= 0),
                    CONSTRAINT check_weight_positive CHECK (weight > 0),
                    CONSTRAINT check_fit_type CHECK (fit IN ('regular', 'tapered', 'wide'))
                )
            """)

            # 3. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.execute("""
                INSERT INTO products SELECT * FROM products_old
            """)

            # 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("DROP TABLE products_old")

            # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ EAN –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute("CREATE INDEX IF NOT EXISTS ix_products_ean ON products (ean)")

            print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã EAN –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏—è—Ö
        cursor.execute("""
            SELECT ean, batch_id, COUNT(*) as cnt 
            FROM products 
            GROUP BY ean, batch_id 
            HAVING cnt > 1
        """)

        duplicates = cursor.fetchall()
        if duplicates:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ EAN –≤ –ø–∞—Ä—Ç–∏—è—Ö")
            for ean, batch_id, count in duplicates:
                print(f"   EAN: {ean}, –ü–∞—Ä—Ç–∏—è: {batch_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ

        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    finally:
        conn.close()


if __name__ == "__main__":
    migrate_database()