"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import os
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Dispatcher, F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, ReplyKeyboardMarkup,
    KeyboardButton, ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_db_session
from data.models import Agent, Sale
from services.core_service import CoreService
from config import ADMIN_IDS, UPLOADS_DIR, CURRENCY_FORMAT, PERCENT_FORMAT
from utils.tools import format_number, format_product_info, create_sales_report


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BatchStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_warehouse = State()


class PriceStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_price = State()


class SaleStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_price = State()
    confirm_sale = State()


class StockStates(StatesGroup):
    waiting_for_filters = State()


class ReturnStates(StatesGroup):
    waiting_for_sale_id = State()
    waiting_for_reason = State()


# –†–æ—É—Ç–µ—Ä
router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [KeyboardButton(text="üìÖ –ü—Ä–∏–µ–º–∫–∞ –ø–∞—Ä—Ç–∏–∏"), KeyboardButton(text="üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")],
        [KeyboardButton(text="üöÄ –ü—Ä–æ–¥–∞–∂–∞"), KeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–∫–∏")],
        [KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å—ã"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã")],
        [KeyboardButton(text="‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_seller_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    keyboard = [
        [KeyboardButton(text="üöÄ –ü—Ä–æ–¥–∞—Ç—å"), KeyboardButton(text="üì¶ –ú–æ–∏ –æ—Å—Ç–∞—Ç–∫–∏")],
        [KeyboardButton(text="üéÅ –ú–æ–π –±–æ–Ω—É—Å"), KeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    with get_db_session() as db:
        agent = CoreService.get_or_create_agent(db, user_id, username, full_name)

        if is_admin(user_id):
            agent.is_admin = True
            db.commit()
            keyboard = get_admin_keyboard()
            role = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            keyboard = get_seller_keyboard()
            role = "–ø—Ä–æ–¥–∞–≤–µ—Ü"

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n"
        f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>{role}</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# === –ü–†–ò–ï–ú–ö–ê –ü–ê–†–¢–ò–ò ===
@router.message(F.text == "üìÖ –ü—Ä–∏–µ–º–∫–∞ –ø–∞—Ä—Ç–∏–∏")
async def batch_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏ –ø–∞—Ä—Ç–∏–∏"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel", callback_data="download_template")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    await message.reply(
        "üìÖ <b>–ü—Ä–∏–µ–º–∫–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(BatchStates.waiting_for_file)


@router.callback_query(F.data == "download_template")
async def download_template(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel"""
    with get_db_session() as db:
        template_bytes = CoreService.generate_excel_template()

    file_name = f"template_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

    await callback.message.answer_document(
        types.BufferedInputFile(
            template_bytes,
            filename=file_name
        ),
        caption="üìÑ –®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    await callback.answer()


@router.message(BatchStates.waiting_for_file, F.document)
async def process_batch_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    document = message.document

    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(UPLOADS_DIR, f"{message.from_user.id}_{document.file_name}")
    await message.bot.download(document, file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    await state.update_data(file_path=file_path)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–ª–∞–¥
    warehouses = ["–û–ª–µ–≥", "–ú–∞–∫—Å–∏–º", "–û–±—â–∏–π"]
    keyboard = InlineKeyboardBuilder()
    for warehouse in warehouses:
        keyboard.button(text=warehouse, callback_data=f"warehouse_{warehouse}")
    keyboard.adjust(2)

    await message.reply(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø–∞—Ä—Ç–∏–∏:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(BatchStates.waiting_for_warehouse)


@router.callback_query(BatchStates.waiting_for_warehouse, F.data.startswith("warehouse_"))
async def process_warehouse_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    warehouse = callback.data.replace("warehouse_", "")
    data = await state.get_data()
    file_path = data['file_path']

    try:
        with get_db_session() as db:
            batch, products = CoreService.create_batch_from_excel(
                db, file_path, warehouse, callback.from_user.id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            batch_number = batch.batch_number
            batch_date = batch.received_date.strftime('%d.%m.%Y %H:%M')
            products_count = len(products)

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏: {batch_number}\n"
            f"üì¶ –°–∫–ª–∞–¥: {warehouse}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}\n"
            f"üìÖ –î–∞—Ç–∞: {batch_date}",
            parse_mode="HTML"
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:\n{str(e)}",
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()


# === –£–°–¢–ê–ù–û–í–ö–ê –¶–ï–ù ===
@router.message(F.text == "üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")
async def price_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.reply(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_product)


@router.message(PriceStates.waiting_for_product)
async def search_product_for_price(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    query = message.text

    with get_db_session() as db:
        products_data = CoreService.search_products(db, query)

    if not products_data:
        await message.reply("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    keyboard = InlineKeyboardBuilder()
    for item in products_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
        product = item['product']
        text = f"{product.name} ({product.size}) - {product.ean}"
        keyboard.button(text=text, callback_data=f"setprice_{product.id}")
    keyboard.adjust(1)
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")

    await message.reply(
        "üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith("setprice_"))
async def select_product_for_price(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    product_id = int(callback.data.replace("setprice_", ""))

    with get_db_session() as db:
        info = CoreService.get_product_info(db, product_id)
        product = info['product']

    await state.update_data(product_id=product_id)

    await callback.message.edit_text(
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        f"<b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {CURRENCY_FORMAT.format(product.cost_price)}\n"
        f"<b>–¢–µ–∫—É—â–∞—è –†–†–¶:</b> {CURRENCY_FORMAT.format(product.retail_price or 0)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:",
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_price)
    await callback.answer()


@router.message(PriceStates.waiting_for_price)
async def set_new_price(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return

    data = await state.get_data()
    product_id = data['product_id']

    with get_db_session() as db:
        product = CoreService.set_retail_price(db, product_id, price, message.from_user.id)

        margin = product.margin
        margin_percent = product.margin_percent

    await message.reply(
        f"‚úÖ <b>–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"<b>–ù–æ–≤–∞—è –†–†–¶:</b> {CURRENCY_FORMAT.format(price)}\n"
        f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(margin)}\n"
        f"<b>–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {PERCENT_FORMAT.format(margin_percent)}",
        parse_mode="HTML"
    )
    await state.clear()


# === –ü–†–û–î–ê–ñ–ò ===
@router.message(F.text.in_(["üöÄ –ü—Ä–æ–¥–∞–∂–∞", "üöÄ –ü—Ä–æ–¥–∞—Ç—å"]))
async def sale_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    await message.reply(
        "üöÄ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.waiting_for_product)


@router.message(SaleStates.waiting_for_product)
async def search_product_for_sale(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    query = message.text

    with get_db_session() as db:
        products_data = CoreService.search_products(db, query)

    if not products_data:
        await message.reply("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    keyboard = InlineKeyboardBuilder()
    has_products = False

    for item in products_data[:10]:
        if item['current_stock'] > 0:
            product = item['product']
            text = f"{product.name} ({product.size}) - –û—Å—Ç–∞—Ç–æ–∫: {item['current_stock']}"
            keyboard.button(text=text, callback_data=f"sell_{product.id}")
            has_products = True

    if not has_products:
        await message.reply("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        return

    keyboard.adjust(1)
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")

    await message.reply(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith("sell_"))
async def select_product_for_sale(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    product_id = int(callback.data.replace("sell_", ""))

    with get_db_session() as db:
        info = CoreService.get_product_info(db, product_id)
        product = info['product']
        current_stock = info['current_stock']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫

    await state.update_data(product_id=product_id, product=product, current_stock=current_stock)

    price_text = CURRENCY_FORMAT.format(product.retail_price) if product.retail_price else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    await callback.message.edit_text(
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        f"<b>–û—Å—Ç–∞—Ç–æ–∫:</b> {current_stock} —à—Ç.\n"
        f"<b>–†–†–¶:</b> {price_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ä—É–±–ª—è—Ö:",
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.waiting_for_price)
    await callback.answer()


@router.message(SaleStates.waiting_for_price)
async def set_sale_price(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return

    data = await state.get_data()
    product = data['product']

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É
    margin = price - product.cost_price
    margin_percent = (margin / price * 100) if price > 0 else 0

    await state.update_data(sale_price=price)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_sale"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])

    await message.reply(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:</b>\n\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name} ({product.size})\n"
        f"<b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> {CURRENCY_FORMAT.format(price)}\n"
        f"<b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {CURRENCY_FORMAT.format(product.cost_price)}\n"
        f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(margin)}\n"
        f"<b>–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {PERCENT_FORMAT.format(margin_percent)}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.confirm_sale)


@router.callback_query(SaleStates.confirm_sale, F.data == "confirm_sale")
async def confirm_sale(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
    data = await state.get_data()

    try:
        with get_db_session() as db:
            sale = CoreService.create_sale(
                db,
                product_id=data['product_id'],
                agent_id=callback.from_user.id,
                sale_price=data['sale_price']
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            product_name = sale.product.name
            sale_price = sale.sale_price
            sale_margin = sale.margin

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
            bonus = sale.bonus
            bonus_info = None
            if bonus:
                bonus_info = {
                    'amount': bonus.amount,
                    'percent': bonus.percent_used
                }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        text = (
            f"‚úÖ <b>–ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
            f"<b>–¶–µ–Ω–∞:</b> {CURRENCY_FORMAT.format(sale_price)}\n"
            f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(sale_margin)}"
        )

        if bonus_info:
            text += f"\n<b>–ë–æ–Ω—É—Å:</b> {CURRENCY_FORMAT.format(bonus_info['amount'])} ({bonus_info['percent']}%)"

        await callback.message.edit_text(text, parse_mode="HTML")

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏:\n{str(e)}",
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()


# === –û–°–¢–ê–¢–ö–ò ===
@router.message(F.text.in_(["üì¶ –û—Å—Ç–∞—Ç–∫–∏", "üì¶ –ú–æ–∏ –æ—Å—Ç–∞—Ç–∫–∏"]))
async def stock_view(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    is_admin_user = is_admin(message.from_user.id)

    keyboard = InlineKeyboardBuilder()

    if is_admin_user:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ - –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
        with get_db_session() as db:
            warehouses = CoreService.get_warehouse_list(db)

        for warehouse in warehouses:
            keyboard.button(text=f"üì¶ {warehouse}", callback_data=f"stock_wh_{warehouse}")
        keyboard.button(text="üìä –í—Å–µ —Å–∫–ª–∞–¥—ã", callback_data="stock_wh_all")
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        keyboard.button(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="stock_wh_all")

    keyboard.adjust(2)

    await message.reply(
        "üì¶ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:" if is_admin_user else "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏</b>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("stock_wh_"))
async def show_stock(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É"""
    warehouse = callback.data.replace("stock_wh_", "")
    warehouse = None if warehouse == "all" else warehouse

    with get_db_session() as db:
        stock = CoreService.get_stock(db, warehouse=warehouse)

    if not stock:
        await callback.message.edit_text("üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏")
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    text = f"üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏{f' –Ω–∞ —Å–∫–ª–∞–¥–µ {warehouse}' if warehouse else ' (–≤—Å–µ —Å–∫–ª–∞–¥—ã)'}</b>\n\n"

    for i, item in enumerate(stock[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        text += (
            f"{i}. <b>{item['name']}</b>\n"
            f"   –†–∞–∑–º–µ—Ä: {item['size']}, –¶–≤–µ—Ç: {item['color']}\n"
            f"   –û—Å—Ç–∞—Ç–æ–∫: {item['stock']} —à—Ç.\n"
            f"   –†–†–¶: {CURRENCY_FORMAT.format(item['retail_price'] or 0)}\n"
            f"   –°–∫–ª–∞–¥: {item['warehouse']}\n\n"
        )

    if len(stock) > 20:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(stock)} —Ç–æ–≤–∞—Ä–æ–≤</i>"

    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


# === –ë–û–ù–£–°–´ ===
@router.message(F.text.in_(["üéÅ –ë–æ–Ω—É—Å—ã", "üéÅ –ú–æ–π –±–æ–Ω—É—Å"]))
async def bonus_view(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–æ–Ω—É—Å–æ–≤"""
    user_id = message.from_user.id
    is_admin_user = is_admin(user_id)

    if is_admin_user:
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        with get_db_session() as db:
            agents = db.query(Agent).filter(Agent.is_active == True).all()

        keyboard = InlineKeyboardBuilder()
        for agent in agents:
            if agent.telegram_id != user_id:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
                keyboard.button(
                    text=f"üë§ {agent.full_name}",
                    callback_data=f"bonus_agent_{agent.id}"
                )
        keyboard.adjust(2)

        await message.reply(
            "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    else:
        # –ü—Ä–æ–¥–∞–≤–µ—Ü –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã
        with get_db_session() as db:
            agent = CoreService.get_or_create_agent(db, user_id)
            bonuses = CoreService.get_agent_bonuses(db, agent.id)

            total_unpaid = sum(b.amount for b in bonuses if not b.is_paid)
            total_paid = sum(b.amount for b in bonuses if b.is_paid)

            text = (
                f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã</b>\n\n"
                f"<b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> {CURRENCY_FORMAT.format(total_unpaid)}\n"
                f"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {CURRENCY_FORMAT.format(total_paid)}\n\n"
                f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            )

            for bonus in bonuses[:10]:
                status = "‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ" if bonus.is_paid else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                text += (
                    f"\n{status} {CURRENCY_FORMAT.format(bonus.amount)} "
                    f"({bonus.percent_used}%) - {bonus.created_at.strftime('%d.%m.%Y')}"
                )

        await message.reply(text, parse_mode="HTML")


@router.callback_query(F.data.startswith("bonus_agent_"))
async def show_agent_bonuses(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–Ω—É—Å—ã –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    agent_id = int(callback.data.replace("bonus_agent_", ""))

    with get_db_session() as db:
        agent = db.query(Agent).get(agent_id)
        bonuses = CoreService.get_agent_bonuses(db, agent_id)

        total_unpaid = sum(b.amount for b in bonuses if not b.is_paid)
        total_paid = sum(b.amount for b in bonuses if b.is_paid)

    keyboard = InlineKeyboardBuilder()
    if total_unpaid > 0:
        keyboard.button(
            text=f"üí∞ –í—ã–ø–ª–∞—Ç–∏—Ç—å {CURRENCY_FORMAT.format(total_unpaid)}",
            callback_data=f"pay_bonus_{agent_id}"
        )
    keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_agents")

    text = (
        f"üéÅ <b>–ë–æ–Ω—É—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ {agent.full_name}</b>\n\n"
        f"<b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> {CURRENCY_FORMAT.format(total_unpaid)}\n"
        f"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {CURRENCY_FORMAT.format(total_paid)}\n"
    )

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("pay_bonus_"))
async def pay_agent_bonus(callback: CallbackQuery):
    """–í—ã–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å –∞–≥–µ–Ω—Ç—É"""
    agent_id = int(callback.data.replace("pay_bonus_", ""))

    with get_db_session() as db:
        amount = CoreService.pay_bonuses(db, agent_id, callback.from_user.id)
        agent = db.query(Agent).get(agent_id)

    await callback.message.edit_text(
        f"‚úÖ <b>–ë–æ–Ω—É—Å—ã –≤—ã–ø–ª–∞—á–µ–Ω—ã!</b>\n\n"
        f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {agent.full_name}\n"
        f"<b>–°—É–º–º–∞:</b> {CURRENCY_FORMAT.format(amount)}",
        parse_mode="HTML"
    )
    await callback.answer()


# === –û–¢–ß–ï–¢–´ ===
@router.message(F.text == "üìä –û—Ç—á—ë—Ç—ã")
async def reports_menu(message: Message):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìà –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_sales_today")
    keyboard.button(text="üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_sales_week")
    keyboard.button(text="üìÖ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü", callback_data="report_sales_month")
    keyboard.button(text="üë• –ü–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º", callback_data="report_by_agents")
    keyboard.adjust(2)

    await message.reply(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("report_"))
async def generate_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    report_type = callback.data.replace("report_", "")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    end_date = datetime.now()
    if report_type == "sales_today":
        start_date = end_date.replace(hour=0, minute=0, second=0)
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif report_type == "sales_week":
        start_date = end_date - timedelta(days=7)
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif report_type == "sales_month":
        start_date = end_date - timedelta(days=30)
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    else:
        start_date = None
        period_name = "–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"

    with get_db_session() as db:
        report = CoreService.get_sales_report(db, start_date, end_date)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    text = create_sales_report(report, period_name)

    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


# === –ò–°–¢–û–†–ò–Ø –ü–†–û–î–ê–ñ ===
@router.message(F.text == "üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂")
async def sales_history(message: Message):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    with get_db_session() as db:
        agent = CoreService.get_or_create_agent(db, message.from_user.id)
        sales = CoreService.get_agent_sales_history(db, agent.id, days=30)

        if not sales:
            text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂."
        else:
            text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π</b>\n\n"

            for i, sale in enumerate(sales[:20], 1):
                status = "‚ùå –í–æ–∑–≤—Ä–∞—Ç" if sale.is_returned else "‚úÖ"
                text += (
                    f"{i}. {status} {sale.product.name} ({sale.product.size})\n"
                    f"   –¶–µ–Ω–∞: {CURRENCY_FORMAT.format(sale.sale_price)}\n"
                    f"   –ú–∞—Ä–∂–∞: {CURRENCY_FORMAT.format(sale.margin)}\n"
                    f"   –î–∞—Ç–∞: {sale.sale_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                )

            if len(sales) > 20:
                text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(sales)} –ø—Ä–æ–¥–∞–∂</i>"

    await message.reply(text, parse_mode="HTML")


# === –í–û–ó–í–†–ê–¢–´ ===
@router.message(F.text == "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç")
async def return_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.reply(
        "‚Ü©Ô∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        parse_mode="HTML"
    )
    await state.set_state(ReturnStates.waiting_for_sale_id)


@router.message(ReturnStates.waiting_for_sale_id)
async def return_sale_id(message: Message, state: FSMContext):
    """–í–≤–æ–¥ ID –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        sale_id = int(message.text)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ)")
        return

    with get_db_session() as db:
        sale = db.query(Sale).get(sale_id)

        if not sale:
            await message.reply("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if sale.is_returned:
            await message.reply("‚ùå –≠—Ç–∞ –ø—Ä–æ–¥–∞–∂–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
            return

        await state.update_data(sale_id=sale_id)

        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ:</b>\n\n"
            f"<b>ID:</b> {sale.id}\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name} ({sale.product.size})\n"
            f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {sale.agent.full_name}\n"
            f"<b>–¶–µ–Ω–∞:</b> {CURRENCY_FORMAT.format(sale.sale_price)}\n"
            f"<b>–î–∞—Ç–∞:</b> {sale.sale_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞:"
        )

    await message.reply(text, parse_mode="HTML")
    await state.set_state(ReturnStates.waiting_for_reason)


@router.message(ReturnStates.waiting_for_reason)
async def return_reason(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    reason = message.text
    data = await state.get_data()
    sale_id = data['sale_id']

    try:
        with get_db_session() as db:
            sale = CoreService.return_sale(db, sale_id, reason, message.from_user.id)

        await message.reply(
            f"‚úÖ <b>–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name}\n"
            f"<b>–í–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥:</b> {sale.warehouse}\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:\n{str(e)}",
            parse_mode="HTML"
        )

    await state.clear()


# === –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()


@router.callback_query(F.data == "back_to_agents")
async def back_to_agents(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
    await bonus_view(callback.message)
    await callback.answer()


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)