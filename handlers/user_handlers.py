"""
handlers/user_handlers.py
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: —Å—Ç–∞—Ä—Ç, –º–µ–Ω—é, –±–æ–Ω—É—Å—ã, –∏—Å—Ç–æ—Ä–∏—è, –Ω–∞–≤–∏–≥–∞—Ü–∏—è
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_db_session
from data.models import Agent, Bonus
from services.core_service import CoreService
from config import CURRENCY_FORMAT
from handlers import (
    is_admin, get_admin_keyboard, get_seller_keyboard,
    get_back_button, show_main_menu, BonusStates
)

router = Router()

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –ú–ï–ù–Æ ===
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    with get_db_session() as db:
        agent = CoreService.get_or_create_agent(db, user_id, username, full_name)
        is_admin_user = is_admin(user_id)

        if is_admin_user:
            agent.is_admin = True
            db.commit()

    await show_main_menu(message, is_admin_user)

# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    await state.clear()
    await show_main_menu(callback)

@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_agents")
async def back_to_agents(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
    await bonus_view(callback.message)
    await callback.answer()

# === –ë–û–ù–£–°–´ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ===
@router.message(F.text.in_(["üéÅ –ë–æ–Ω—É—Å—ã", "üéÅ –ú–æ–π –±–æ–Ω—É—Å"]))
async def bonus_view(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–æ–Ω—É—Å–æ–≤"""
    user_id = message.from_user.id
    is_admin_user = is_admin(user_id)

    if is_admin_user:
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        with get_db_session() as db:
            agents = db.query(Agent).filter(Agent.is_active == True).all()

        keyboard = InlineKeyboardBuilder()
        for agent in agents:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
            unpaid_bonuses = db.query(Bonus).filter(
                Bonus.agent_id == agent.id,
                Bonus.is_paid == False
            ).all()
            unpaid_amount = sum(b.amount for b in unpaid_bonuses)

            display_text = f"üë§ {agent.full_name}"
            if unpaid_amount > 0:
                display_text += f" ({CURRENCY_FORMAT.format(unpaid_amount)})"

            keyboard.button(
                text=display_text,
                callback_data=f"bonus_agent_{agent.id}"
            )

        keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_bonus_list")
        keyboard.row(get_back_button())
        keyboard.adjust(2)

        await message.reply(
            "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    else:
        # –ü—Ä–æ–¥–∞–≤–µ—Ü –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã
        with get_db_session() as db:
            agent = CoreService.get_or_create_agent(db, user_id)
            bonuses = CoreService.get_agent_bonuses(db, agent.id)

            total_unpaid = sum(b.amount for b in bonuses if not b.is_paid)
            total_paid = sum(b.amount for b in bonuses if b.is_paid)

            text = (
                f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã</b>\n\n"
                f"<b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> {CURRENCY_FORMAT.format(total_unpaid)}\n"
                f"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {CURRENCY_FORMAT.format(total_paid)}\n\n"
            )

            if bonuses:
                text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
                for bonus in bonuses[:10]:
                    status = "‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ" if bonus.is_paid else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                    text += (
                        f"\n{status} {CURRENCY_FORMAT.format(bonus.amount)} "
                        f"({bonus.percent_used}%) - {bonus.created_at.strftime('%d.%m.%Y')}"
                    )
            else:
                text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤."

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_my_bonus")],
            [get_back_button()]
        ])

        await message.reply(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("bonus_agent_"))
async def show_agent_bonuses(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–Ω—É—Å—ã –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    agent_id = int(callback.data.replace("bonus_agent_", ""))

    with get_db_session() as db:
        agent = db.query(Agent).get(agent_id)
        bonuses = CoreService.get_agent_bonuses(db, agent_id)

        total_unpaid = sum(b.amount for b in bonuses if not b.is_paid)
        total_paid = sum(b.amount for b in bonuses if b.is_paid)

    keyboard = InlineKeyboardBuilder()
    if total_unpaid > 0:
        keyboard.button(
            text=f"üí∞ –í—ã–ø–ª–∞—Ç–∏—Ç—å {CURRENCY_FORMAT.format(total_unpaid)}",
            callback_data=f"pay_bonus_{agent_id}"
        )
        keyboard.button(
            text="üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å –±–æ–Ω—É—Å—ã",
            callback_data=f"reset_bonus_{agent_id}"
        )
    keyboard.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_agents")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    keyboard.adjust(2)

    text = (
        f"üéÅ <b>–ë–æ–Ω—É—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ {agent.full_name}</b>\n\n"
        f"<b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> {CURRENCY_FORMAT.format(total_unpaid)}\n"
        f"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {CURRENCY_FORMAT.format(total_paid)}\n"
    )

    if bonuses:
        text += "\n<b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
        for bonus in bonuses[:5]:
            status = "‚úÖ" if bonus.is_paid else "‚è≥"
            text += (
                f"{status} {CURRENCY_FORMAT.format(bonus.amount)} "
                f"({bonus.percent_used}%) - {bonus.created_at.strftime('%d.%m.%Y')}\n"
            )

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pay_bonus_"))
async def pay_agent_bonus(callback: CallbackQuery):
    """–í—ã–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å –∞–≥–µ–Ω—Ç—É"""
    agent_id = int(callback.data.replace("pay_bonus_", ""))

    with get_db_session() as db:
        amount = CoreService.pay_bonuses(db, agent_id, callback.from_user.id)
        agent = db.query(Agent).get(agent_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_agents")],
        [get_back_button()]
    ])

    await callback.message.edit_text(
        f"‚úÖ <b>–ë–æ–Ω—É—Å—ã –≤—ã–ø–ª–∞—á–µ–Ω—ã!</b>\n\n"
        f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {agent.full_name}\n"
        f"<b>–°—É–º–º–∞:</b> {CURRENCY_FORMAT.format(amount)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("reset_bonus_"))
async def reset_bonus_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    agent_id = int(callback.data.replace("reset_bonus_", ""))

    with get_db_session() as db:
        agent = db.query(Agent).get(agent_id)
        unpaid_bonuses = db.query(Bonus).filter(
            Bonus.agent_id == agent_id,
            Bonus.is_paid == False
        ).all()
        total_unpaid = sum(b.amount for b in unpaid_bonuses)

    await state.update_data(agent_id=agent_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å", callback_data="confirm_reset_bonus"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"bonus_agent_{agent_id}")
        ],
        [get_back_button()]
    ])

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ <b>{agent.full_name}</b>?\n\n"
        f"<b>–°—É–º–º–∞ –∫ –æ–±–Ω—É–ª–µ–Ω–∏—é:</b> {CURRENCY_FORMAT.format(total_unpaid)}\n\n"
        f"‚ùó <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(BonusStates.waiting_for_confirmation)
    await callback.answer()

@router.callback_query(BonusStates.waiting_for_confirmation, F.data == "confirm_reset_bonus")
async def confirm_reset_bonus(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    data = await state.get_data()
    agent_id = data['agent_id']

    try:
        with get_db_session() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent = db.query(Agent).get(agent_id)

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
            unpaid_bonuses = db.query(Bonus).filter(
                Bonus.agent_id == agent_id,
                Bonus.is_paid == False
            ).all()

            total_amount = sum(b.amount for b in unpaid_bonuses)

            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
            for bonus in unpaid_bonuses:
                db.delete(bonus)

            db.commit()

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            CoreService.log_action(
                db, callback.from_user.id, 'bonuses_reset',
                'agent', agent_id,
                f'–û–±–Ω—É–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –Ω–∞ —Å—É–º–º—É {total_amount}'
            )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_agents")],
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ë–æ–Ω—É—Å—ã –æ–±–Ω—É–ª–µ–Ω—ã!</b>\n\n"
            f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {agent.full_name}\n"
            f"<b>–û–±–Ω—É–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞:</b> {CURRENCY_FORMAT.format(total_amount)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤:\n{str(e)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "refresh_bonus_list")
async def refresh_bonus_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ–Ω—É—Å–æ–≤"""
    await bonus_view(callback.message)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "refresh_my_bonus")
async def refresh_my_bonus(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–æ–∏ –±–æ–Ω—É—Å—ã"""
    await bonus_view(callback.message)
    await callback.answer("üîÑ –ë–æ–Ω—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

# === –ò–°–¢–û–†–ò–Ø –ü–†–û–î–ê–ñ (–¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤) ===
@router.message(F.text == "üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂")
async def sales_history(message: Message):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    with get_db_session() as db:
        agent = CoreService.get_or_create_agent(db, message.from_user.id)
        sales = CoreService.get_agent_sales_history(db, agent.id, days=30)

        if not sales:
            text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂."
        else:
            text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π</b>\n\n"

            for i, sale in enumerate(sales[:20], 1):
                status = "‚ùå –í–æ–∑–≤—Ä–∞—Ç" if sale.is_returned else "‚úÖ"
                text += (
                    f"{i}. {status} {sale.product.name} ({sale.product.size})\n"
                    f"   –¶–µ–Ω–∞: {CURRENCY_FORMAT.format(sale.sale_price)}\n"
                    f"   –ú–∞—Ä–∂–∞: {CURRENCY_FORMAT.format(sale.margin)}\n"
                    f"   –î–∞—Ç–∞: {sale.sale_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                )

            if len(sales) > 20:
                text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(sales)} –ø—Ä–æ–¥–∞–∂</i>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_sales_history")],
        [get_back_button()]
    ])

    await message.reply(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "refresh_sales_history")
async def refresh_sales_history(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂"""
    await sales_history(callback.message)
    await callback.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    dp.include_router(router)