"""
handlers/sales_handlers.py
–ü—Ä–æ–¥–∞–∂–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∏ - —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –∞–¥–º–∏–Ω–∞–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞–º
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_db_session
from services.core_service import CoreService
from config import CURRENCY_FORMAT, PERCENT_FORMAT
from handlers import (
    SaleStates, is_admin, get_cancel_back_keyboard,
    get_back_button
)

router = Router()

# === –ü–†–û–î–ê–ñ–ò –° –£–õ–£–ß–®–ï–ù–ù–´–ú–ò –§–ò–õ–¨–¢–†–ê–ú–ò ===
@router.message(F.text.in_(["üöÄ –ü—Ä–æ–¥–∞–∂–∞", "üöÄ –ü—Ä–æ–¥–∞—Ç—å"]))
async def sale_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞"""
    keyboard = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/EAN", callback_data="search_text")
    keyboard.button(text="üìÇ –§–∏–ª—å—Ç—Ä—ã", callback_data="search_filters")
    keyboard.button(text="üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="search_all")

    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )
    keyboard.adjust(1)

    await message.reply(
        "üöÄ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏</b>\n\n"
        "–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä?",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.choosing_filter)

@router.callback_query(SaleStates.choosing_filter, F.data == "search_text")
async def search_by_text(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É - —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±"""
    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.waiting_for_product)
    await callback.answer()

@router.callback_query(SaleStates.choosing_filter, F.data == "search_filters")
async def show_filters_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    with get_db_session() as db:
        available_data = CoreService.get_available_filter_values(db)

    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if available_data['categories']:
        keyboard.button(text="üèí –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞", callback_data="filter_category")
    if available_data['sizes']:
        keyboard.button(text="üìè –ü–æ —Ä–∞–∑–º–µ—Ä—É", callback_data="filter_size")
    if available_data['ages']:
        keyboard.button(text="üë• –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="filter_age")
    if available_data['warehouses']:
        keyboard.button(text="üì¶ –ü–æ —Å–∫–ª–∞–¥—É", callback_data="filter_warehouse")
    if available_data['colors']:
        keyboard.button(text="üé® –ü–æ —Ü–≤–µ—Ç—É", callback_data="filter_color")

    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_search"),
        get_back_button()
    )
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üìÇ <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_search")
async def back_to_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞"""
    await sale_start(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "filter_category")
async def filter_by_category(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    with get_db_session() as db:
        categories = CoreService.get_product_categories_in_stock(db)

    keyboard = InlineKeyboardBuilder()
    for category, count in categories.items():
        keyboard.button(
            text=f"{category} ({count})",
            callback_data=f"cat_{category[:20]}"
        )

    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="search_filters"),
        get_back_button()
    )
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üèí <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        "<i>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏</i>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.filter_by_category)
    await callback.answer()

@router.callback_query(F.data == "filter_size")
async def filter_by_size(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
    with get_db_session() as db:
        sizes = CoreService.get_available_sizes_in_stock(db)

    keyboard = InlineKeyboardBuilder()
    for size, count in sizes.items():
        keyboard.button(
            text=f"{size} ({count})",
            callback_data=f"size_{size}"
        )

    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="search_filters"),
        get_back_button()
    )
    keyboard.adjust(3)

    await callback.message.edit_text(
        "üìè <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:</b>\n\n"
        "<i>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏</i>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.filter_by_size)
    await callback.answer()

@router.callback_query(F.data == "filter_age")
async def filter_by_age(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
    with get_db_session() as db:
        ages = CoreService.get_available_ages_in_stock(db)

    keyboard = InlineKeyboardBuilder()
    age_names = {
        'YTH': '–î–µ—Ç—Å–∫–∏–π',
        'JR': '–Æ–Ω–∏–æ—Ä—Å–∫–∏–π',
        'INT': '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π',
        'SR': '–í–∑—Ä–æ—Å–ª—ã–π'
    }

    for age, count in ages.items():
        display_name = age_names.get(age, age)
        keyboard.button(
            text=f"{display_name} ({count})",
            callback_data=f"age_{age}"
        )

    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="search_filters"),
        get_back_button()
    )
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:</b>\n\n"
        "<i>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏</i>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.filter_by_age)
    await callback.answer()

@router.callback_query(F.data == "filter_warehouse")
async def filter_by_warehouse(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É"""
    with get_db_session() as db:
        warehouses = CoreService.get_warehouses_with_stock(db)

    keyboard = InlineKeyboardBuilder()
    for warehouse, count in warehouses.items():
        keyboard.button(
            text=f"üì¶ {warehouse} ({count})",
            callback_data=f"wh_{warehouse[:15]}"
        )

    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="search_filters"),
        get_back_button()
    )
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:</b>\n\n"
        "<i>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏</i>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.filter_by_warehouse)
    await callback.answer()

# === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –§–ò–õ–¨–¢–†–û–í ===
@router.callback_query(SaleStates.filter_by_category, F.data.startswith("cat_"))
async def show_products_by_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.replace("cat_", "")

    with get_db_session() as db:
        products_data = CoreService.get_products_by_category(db, category)

    await show_filtered_products(callback, state, products_data, f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")

@router.callback_query(SaleStates.filter_by_size, F.data.startswith("size_"))
async def show_products_by_size(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
    size = callback.data.replace("size_", "")

    with get_db_session() as db:
        products_data = CoreService.get_products_by_size(db, size)

    await show_filtered_products(callback, state, products_data, f"—Ä–∞–∑–º–µ—Ä—É '{size}'")

@router.callback_query(SaleStates.filter_by_age, F.data.startswith("age_"))
async def show_products_by_age(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    age = callback.data.replace("age_", "")

    with get_db_session() as db:
        products_data = CoreService.get_products_by_age(db, age)

    age_names = {'YTH': '–î–µ—Ç—Å–∫–∏–π', 'JR': '–Æ–Ω–∏–æ—Ä—Å–∫–∏–π', 'INT': '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π', 'SR': '–í–∑—Ä–æ—Å–ª—ã–π'}
    display_name = age_names.get(age, age)

    await show_filtered_products(callback, state, products_data, f"–≤–æ–∑—Ä–∞—Å—Ç—É '{display_name}'")

@router.callback_query(SaleStates.filter_by_warehouse, F.data.startswith("wh_"))
async def show_products_by_warehouse(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–∫–ª–∞–¥—É"""
    warehouse = callback.data.replace("wh_", "")

    with get_db_session() as db:
        products_data = CoreService.get_products_by_warehouse(db, warehouse)

    await show_filtered_products(callback, state, products_data, f"—Å–∫–ª–∞–¥—É '{warehouse}'")

@router.callback_query(SaleStates.choosing_filter, F.data == "search_all")
async def show_all_products(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏"""
    with get_db_session() as db:
        products_data = CoreService.get_all_products_in_stock(db)

    await show_filtered_products(callback, state, products_data, "–≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –≤ –Ω–∞–ª–∏—á–∏–∏")

async def show_filtered_products(callback: CallbackQuery, state: FSMContext,
                                products_data: list, filter_description: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    if not products_data:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="search_filters")],
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ {filter_description}",
            reply_markup=keyboard
        )
        await callback.answer()
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 8 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_size = 8
    total_pages = (len(products_data) + page_size - 1) // page_size
    current_page = 0

    await state.update_data(
        filtered_products=products_data,
        current_page=current_page,
        total_pages=total_pages,
        filter_description=filter_description
    )

    await show_products_page(callback, state, current_page)

async def show_products_page(callback: CallbackQuery, state: FSMContext, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    data = await state.get_data()
    products_data = data['filtered_products']
    total_pages = data['total_pages']
    filter_description = data['filter_description']

    page_size = 8
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(products_data))
    page_products = products_data[start_idx:end_idx]

    keyboard = InlineKeyboardBuilder()

    # –¢–æ–≤–∞—Ä—ã
    for item in page_products:
        product = item['product']
        stock = item['current_stock']
        price_info = f" - {CURRENCY_FORMAT.format(product.retail_price)}" if product.retail_price else ""

        text = f"{product.name} ({product.size}){price_info} | {stock} —à—Ç."
        keyboard.button(text=text, callback_data=f"sell_{product.id}")

    keyboard.adjust(1)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{page+1}"))

    if nav_buttons:
        keyboard.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.row(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="back_to_search"),
        InlineKeyboardButton(text="üìÇ –§–∏–ª—å—Ç—Ä—ã", callback_data="search_filters")
    )
    keyboard.row(get_back_button())

    text = (
        f"üìã <b>–¢–æ–≤–∞—Ä—ã –ø–æ {filter_description}</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(page_products)} –∏–∑ {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:"
    )

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("page_"))
async def navigate_pages(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    page = int(callback.data.replace("page_", ""))
    await show_products_page(callback, state, page)

# === –°–¢–ê–†–´–ô –ü–û–ò–°–ö –ü–û –¢–ï–ö–°–¢–£ ===
@router.message(SaleStates.waiting_for_product)
async def search_product_for_sale(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)"""
    query = callback.text

    with get_db_session() as db:
        products_data = CoreService.search_products(db, query)

    if not products_data:
        keyboard = get_cancel_back_keyboard()
        await callback.reply(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=keyboard
        )
        return

    keyboard = InlineKeyboardBuilder()
    has_products = False

    for item in products_data[:10]:
        if item['current_stock'] > 0:
            product = item['product']
            text = f"{product.name} ({product.size}) - –û—Å—Ç–∞—Ç–æ–∫: {item['current_stock']}"
            keyboard.button(text=text, callback_data=f"sell_{product.id}")
            has_products = True

    if not has_products:
        keyboard = get_cancel_back_keyboard()
        await callback.reply(
            "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
            reply_markup=keyboard
        )
        return

    keyboard.adjust(1)
    keyboard.row(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search_sale"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )

    await callback.reply(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "new_search_sale")
async def new_search_sale(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        "üöÄ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.waiting_for_product)
    await callback.answer()

# === –û–°–¢–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–î–ê–ñ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
@router.callback_query(F.data.startswith("sell_"))
async def select_product_for_sale(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    product_id = int(callback.data.replace("sell_", ""))

    with get_db_session() as db:
        info = CoreService.get_product_info(db, product_id)
        product = info['product']
        current_stock = info['current_stock']

    await state.update_data(product_id=product_id, product=product, current_stock=current_stock)

    price_text = CURRENCY_FORMAT.format(product.retail_price) if product.retail_price else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        f"<b>–û—Å—Ç–∞—Ç–æ–∫:</b> {current_stock} —à—Ç.\n"
        f"<b>–†–†–¶:</b> {price_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.waiting_for_price)
    await callback.answer()

@router.message(SaleStates.waiting_for_price)
async def set_sale_price(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)",
            reply_markup=keyboard
        )
        return

    data = await state.get_data()
    product = data['product']

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É
    margin = price - product.cost_price
    margin_percent = (margin / price * 100) if price > 0 else 0

    await state.update_data(sale_price=price)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_sale"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ],
        [get_back_button()]
    ])

    await message.reply(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:</b>\n\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name} ({product.size})\n"
        f"<b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> {CURRENCY_FORMAT.format(price)}\n"
        f"<b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {CURRENCY_FORMAT.format(product.cost_price)}\n"
        f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(margin)}\n"
        f"<b>–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {PERCENT_FORMAT.format(margin_percent)}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SaleStates.confirm_sale)

@router.callback_query(SaleStates.confirm_sale, F.data == "confirm_sale")
async def confirm_sale(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
    data = await state.get_data()

    try:
        with get_db_session() as db:
            sale = CoreService.create_sale(
                db,
                product_id=data['product_id'],
                agent_id=callback.from_user.id,
                sale_price=data['sale_price']
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            product_name = sale.product.name
            sale_price = sale.sale_price
            sale_margin = sale.margin

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
            bonus = sale.bonus
            bonus_info = None
            if bonus:
                bonus_info = {
                    'amount': bonus.amount,
                    'percent': bonus.percent_used
                }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        text = (
            f"‚úÖ <b>–ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
            f"<b>–¶–µ–Ω–∞:</b> {CURRENCY_FORMAT.format(sale_price)}\n"
            f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(sale_margin)}"
        )

        if bonus_info:
            text += f"\n<b>–ë–æ–Ω—É—Å:</b> {CURRENCY_FORMAT.format(bonus_info['amount'])} ({bonus_info['percent']}%)"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏:\n{str(e)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()

# === –û–°–¢–ê–¢–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
@router.message(F.text.in_(["üì¶ –û—Å—Ç–∞—Ç–∫–∏", "üì¶ –ú–æ–∏ –æ—Å—Ç–∞—Ç–∫–∏"]))
async def stock_view(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    is_admin_user = is_admin(message.from_user.id)

    keyboard = InlineKeyboardBuilder()

    if is_admin_user:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ - –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
        with get_db_session() as db:
            warehouses = CoreService.get_warehouse_list(db)

        for warehouse in warehouses:
            keyboard.button(text=f"üì¶ {warehouse}", callback_data=f"stock_wh_{warehouse}")
        keyboard.button(text="üìä –í—Å–µ —Å–∫–ª–∞–¥—ã", callback_data="stock_wh_all")
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        keyboard.button(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="stock_wh_all")

    keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stock")
    keyboard.row(get_back_button())
    keyboard.adjust(2)

    await message.reply(
        "üì¶ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:" if is_admin_user else "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏</b>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("stock_wh_"))
async def show_stock(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É"""
    warehouse = callback.data.replace("stock_wh_", "")
    warehouse = None if warehouse == "all" else warehouse

    with get_db_session() as db:
        stock = CoreService.get_stock(db, warehouse=warehouse)

    if not stock:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stock")],
            [get_back_button()]
        ])

        await callback.message.edit_text(
            "üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏",
            reply_markup=keyboard
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    text = f"üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏{f' –Ω–∞ —Å–∫–ª–∞–¥–µ {warehouse}' if warehouse else ' (–≤—Å–µ —Å–∫–ª–∞–¥—ã)'}</b>\n\n"

    for i, item in enumerate(stock[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        text += (
            f"{i}. <b>{item['name']}</b>\n"
            f"   –†–∞–∑–º–µ—Ä: {item['size']}, –¶–≤–µ—Ç: {item['color']}\n"
            f"   –û—Å—Ç–∞—Ç–æ–∫: {item['stock']} —à—Ç.\n"
            f"   –†–†–¶: {CURRENCY_FORMAT.format(item['retail_price'] or 0)}\n"
            f"   –°–∫–ª–∞–¥: {item['warehouse']}\n\n"
        )

    if len(stock) > 20:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(stock)} —Ç–æ–≤–∞—Ä–æ–≤</i>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"stock_wh_{warehouse if warehouse else 'all'}")],
        [get_back_button()]
    ])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "refresh_stock")
async def refresh_stock(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    await stock_view(callback.message)
    await callback.answer("üîÑ –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    dp.include_router(router)