"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ö–æ–∫–∫–µ–π–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers import get_back_button
from services.core_service import CoreService
from data.db import get_db_session
from config import CURRENCY_FORMAT


router = Router()


class GearStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
    choosing_method = State()  # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–¥–±–æ—Ä–∞
    questionnaire_position = State()  # –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    questionnaire_skill = State()  # –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
    questionnaire_age = State()  # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
    questionnaire_budget = State()  # –ë—é–¥–∂–µ—Ç
    questionnaire_size = State()  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
    showing_results = State()  # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤


@router.message(F.text == "üèí –ü–æ–¥–±–æ—Ä —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏")
async def gear_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–±–æ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
    kb = InlineKeyboardBuilder()
    
    kb.button(text="üìù –ê–Ω–∫–µ—Ç–∞ –ø–æ–¥–±–æ—Ä–∞", callback_data="gear_questionnaire")
    kb.button(text="üì¶ –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã", callback_data="gear_kits")
    kb.row()
    kb.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä—É", callback_data="gear_search_by_product")
    kb.row(get_back_button())
    
    await message.answer(
        "üèí <b>–ü–æ–¥–±–æ—Ä —Ö–æ–∫–∫–µ–π–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–±–æ—Ä–∞:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "gear_questionnaire")
async def start_questionnaire(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–¥–±–æ—Ä–∞"""
    await state.set_state(GearStates.questionnaire_position)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="ü•Ö –í—Ä–∞—Ç–∞—Ä—å", callback_data="gear_pos_goalie")
    kb.button(text="üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫", callback_data="gear_pos_defender")
    kb.button(text="‚ö° –ù–∞–ø–∞–¥–∞—é—â–∏–π", callback_data="gear_pos_forward")
    kb.button(text="üéØ –õ—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è", callback_data="gear_pos_all")
    kb.row(get_back_button())
    
    await callback.message.edit_text(
        "üéØ <b>–®–∞–≥ 1: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gear_pos_"))
async def save_position(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–≤–Ω—é –∏–≥—Ä—ã"""
    position = callback.data.replace("gear_pos_", "")
    await state.update_data(position=position)
    await state.set_state(GearStates.questionnaire_skill)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üå± –ù–æ–≤–∏—á–æ–∫", callback_data="gear_skill_beginner")
    kb.button(text="üèÜ –õ—é–±–∏—Ç–µ–ª—å", callback_data="gear_skill_amateur")
    kb.button(text="‚≠ê –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", callback_data="gear_skill_professional")
    kb.row(get_back_button())
    
    await callback.message.edit_text(
        "üèÜ <b>–®–∞–≥ 2: –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gear_skill_"))
async def save_skill(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    skill = callback.data.replace("gear_skill_", "")
    await state.update_data(skill_level=skill)
    await state.set_state(GearStates.questionnaire_age)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üë∂ –î–µ—Ç–∏ (–¥–æ 12 –ª–µ—Ç)", callback_data="gear_age_kids")
    kb.button(text="üë¶ –Æ–Ω–∏–æ—Ä—ã (13-17 –ª–µ—Ç)", callback_data="gear_age_youth")
    kb.button(text="üë® –í–∑—Ä–æ—Å–ª—ã–µ (18+)", callback_data="gear_age_adult")
    kb.row(get_back_button())
    
    await callback.message.edit_text(
        "üë§ <b>–®–∞–≥ 3: –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gear_age_"))
async def save_age(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±—é–¥–∂–µ—Ç—É"""
    age = callback.data.replace("gear_age_", "")
    await state.update_data(age_group=age)
    await state.set_state(GearStates.questionnaire_budget)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∏ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="gear_budget_none")
    kb.button(text="üí∞ –î–æ 10,000 ‚ÇΩ", callback_data="gear_budget_10000")
    kb.button(text="üíµ –î–æ 20,000 ‚ÇΩ", callback_data="gear_budget_20000")
    kb.button(text="üíé –î–æ 50,000 ‚ÇΩ", callback_data="gear_budget_50000")
    kb.row(get_back_button())
    
    await callback.message.edit_text(
        "üí∞ <b>–®–∞–≥ 4: –ë—é–¥–∂–µ—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É):",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gear_budget_"))
async def save_budget(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
    budget_str = callback.data.replace("gear_budget_", "")
    
    if budget_str == "none":
        budget = None
    else:
        budget = int(budget_str)
    
    await state.update_data(budget=budget)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await show_questionnaire_results(callback, state)


@router.message(GearStates.questionnaire_budget)
async def handle_budget_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
    try:
        budget = int(message.text.replace(' ', '').replace('‚ÇΩ', '').replace(',', ''))
        await state.update_data(budget=budget)
        await show_questionnaire_results(message, state)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 15000 ‚ÇΩ)"
        )


async def show_questionnaire_results(update: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞ –ø–æ –∞–Ω–∫–µ—Ç–µ"""
    data = await state.get_data()
    
    with get_db_session() as db:
        results = CoreService.search_gear_by_questionnaire(db, data)
    
    if not results:
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="gear_questionnaire")
        kb.row(get_back_button())
        
        text = (
            "üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã"
        )
        
        if isinstance(update, CallbackQuery):
            await update.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
            await update.answer()
        else:
            await update.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categorized = {}
    for item in results:
        category = item['category']
        if category not in categorized:
            categorized[category] = []
        categorized[category].append(item)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = "üèí <b>–ü–æ–¥–æ–±—Ä–∞–Ω–Ω–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞:</b>\n\n"
    
    for category, items in categorized.items():
        text += f"üì¶ <b>{category.title()}:</b>\n"
        for i, item in enumerate(items[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            price = CURRENCY_FORMAT.format(item['price'])
            text += f"{i}. {item['name']}\n"
            text += f"   üí∞ {price} | üì¶ {item['stock']} —à—Ç. | üîπ {item['size']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_cost = sum(item['price'] for item in results)
    text += f"üíé <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {CURRENCY_FORMAT.format(total_cost)}</b>\n\n"
    
    if data.get('budget') and total_cost > data['budget']:
        text += "‚ö†Ô∏è <i>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç</i>\n\n"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="gear_add_to_cart")
    kb.button(text="üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="gear_save_list")
    kb.row()
    kb.button(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="gear_questionnaire")
    kb.row(get_back_button())
    
    await state.set_state(GearStates.showing_results)
    await state.update_data(search_results=results)
    
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        await update.answer()
    else:
        await update.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")


@router.callback_query(F.data == "gear_kits")
async def show_gear_kits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
    kits = CoreService.get_gear_kits()
    
    kb = InlineKeyboardBuilder()
    
    for kit_id, kit in kits.items():
        kb.button(
            text=f"üì¶ {kit['name']}", 
            callback_data=f"gear_kit_{kit_id}"
        )
    
    kb.row(get_back_button())
    
    await callback.message.edit_text(
        "üì¶ <b>–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–º–ø–ª–µ–∫—Ç:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gear_kit_"))
async def show_kit_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –∏ —Ç–æ–≤–∞—Ä—ã"""
    kit_id = callback.data.replace("gear_kit_", "")
    kits = CoreService.get_gear_kits()
    
    if kit_id not in kits:
        await callback.answer("‚ùå –ö–æ–º–ø–ª–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    kit = kits[kit_id]
    
    with get_db_session() as db:
        products = CoreService.search_gear_by_kit(db, kit_id)
    
    if not products:
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–æ–º–ø–ª–µ–∫—Ç", callback_data="gear_kits")
        kb.row(get_back_button())
        
        await callback.message.edit_text(
            f"üòî <b>–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            f"–ö–æ–º–ø–ª–µ–∫—Ç: {kit['name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {kit['description']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–ª–µ–∫—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categorized = {}
    for product in products:
        category = product['category']
        if category not in categorized:
            categorized[category] = []
        categorized[category].append(product)
    
    text = f"üì¶ <b>{kit['name']}</b>\n"
    text += f"üìù {kit['description']}\n\n"
    
    for category, items in categorized.items():
        text += f"üîπ <b>{category.title()}:</b>\n"
        for i, item in enumerate(items[:2], 1):  # –¢–æ–ø-2 –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            price = CURRENCY_FORMAT.format(item['price'])
            text += f"{i}. {item['name']}\n"
            text += f"   üí∞ {price} | üì¶ {item['stock']} —à—Ç.\n\n"
    
    total_cost = sum(item['price'] for item in products)
    text += f"üíé <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {CURRENCY_FORMAT.format(total_cost)}</b>\n\n"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç", callback_data=f"gear_order_kit_{kit_id}")
    kb.button(text="üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=f"gear_kit_details_{kit_id}")
    kb.row()
    kb.button(text="üîÑ –î—Ä—É–≥–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã", callback_data="gear_kits")
    kb.row(get_back_button())
    
    await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "gear_search_by_product")
async def gear_search_by_product(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É"""
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gear_add_to_cart"))
async def add_gear_to_cart(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    data = await state.get_data()
    results = data.get('search_results', [])
    
    if not results:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É!",
        show_alert=True
    )


@router.callback_query(F.data.startswith("gear_save_list"))
async def save_gear_list(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    results = data.get('search_results', [])
    
    if not results:
        await callback.answer("‚ùå –ù–µ—Ç —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer(
        f"üíæ –°–ø–∏—Å–æ–∫ –∏–∑ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        show_alert=True
    )


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–±–æ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
    dp.include_router(router)
