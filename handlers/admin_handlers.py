"""
handlers/admin_handlers.py
–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: –ø—Ä–∏–µ–º–∫–∞, —Ü–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—Ç—ã, –æ—Ç—á–µ—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""
import os
from datetime import datetime, timedelta
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_db_session
from data.models import Agent, Sale
from services.core_service import CoreService
from config import UPLOADS_DIR, CURRENCY_FORMAT, PERCENT_FORMAT
from utils.tools import create_sales_report
from handlers import (
    BatchStates, PriceStates, ReturnStates,
    is_admin, get_cancel_back_keyboard, get_back_button
)

router = Router()

# === –ü–†–ò–ï–ú–ö–ê –ü–ê–†–¢–ò–ô ===
@router.message(F.text == "üìÖ –ü—Ä–∏–µ–º–∫–∞ –ø–∞—Ä—Ç–∏–∏")
async def batch_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏ –ø–∞—Ä—Ç–∏–∏"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel", callback_data="download_template")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
         get_back_button()]
    ])

    await message.reply(
        "üìÖ <b>–ü—Ä–∏–µ–º–∫–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(BatchStates.waiting_for_file)

@router.callback_query(F.data == "download_template")
async def download_template(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel"""
    with get_db_session() as db:
        template_bytes = CoreService.generate_excel_template()

    file_name = f"template_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

    await callback.message.answer_document(
        types.BufferedInputFile(
            template_bytes,
            filename=file_name
        ),
        caption="üìÑ –®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    await callback.answer()

@router.message(BatchStates.waiting_for_file, F.document)
async def process_batch_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    document = message.document

    if not document.file_name.endswith(('.xlsx', '.xls')):
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)",
            reply_markup=keyboard
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(UPLOADS_DIR, f"{message.from_user.id}_{document.file_name}")
    await message.bot.download(document, file_path)

    await state.update_data(file_path=file_path)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –ë–î –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    with get_db_session() as db:
        existing_warehouses = CoreService.get_warehouse_list(db)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    from config import DEFAULT_WAREHOUSES
    all_warehouses = list(set(existing_warehouses + DEFAULT_WAREHOUSES))

    keyboard = InlineKeyboardBuilder()
    for warehouse in all_warehouses:
        keyboard.button(text=warehouse, callback_data=f"warehouse_{warehouse}")
    keyboard.button(text="‚ûï –ù–æ–≤—ã–π —Å–∫–ª–∞–¥", callback_data="warehouse_new")
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )
    keyboard.adjust(2)

    await message.reply(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø–∞—Ä—Ç–∏–∏:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(BatchStates.waiting_for_warehouse)

@router.callback_query(BatchStates.waiting_for_warehouse, F.data.startswith("warehouse_"))
async def process_warehouse_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    warehouse = callback.data.replace("warehouse_", "")
    data = await state.get_data()
    file_path = data['file_path']

    try:
        with get_db_session() as db:
            batch, products = CoreService.create_batch_from_excel(
                db, file_path, warehouse, callback.from_user.id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            batch_number = batch.batch_number
            batch_date = batch.received_date.strftime('%d.%m.%Y %H:%M')
            products_count = len(products)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏: {batch_number}\n"
            f"üì¶ –°–∫–ª–∞–¥: {warehouse}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}\n"
            f"üìÖ –î–∞—Ç–∞: {batch_date}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)

    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:\n{str(e)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()

# === –£–°–¢–ê–ù–û–í–ö–ê –¶–ï–ù ===
@router.message(F.text == "üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")
async def price_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = get_cancel_back_keyboard()

    await message.reply(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_product)

@router.message(PriceStates.waiting_for_product)
async def search_product_for_price(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    query = message.text

    with get_db_session() as db:
        products_data = CoreService.search_products(db, query)

    if not products_data:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=keyboard
        )
        return

    keyboard = InlineKeyboardBuilder()
    for item in products_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
        product = item['product']
        text = f"{product.name} ({product.size}) - {product.ean}"
        keyboard.button(text=text, callback_data=f"setprice_{product.id}")
    keyboard.adjust(1)
    keyboard.row(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search_price"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )

    await message.reply(
        "üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "new_search_price")
async def new_search_price(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_product)
    await callback.answer()

@router.callback_query(F.data.startswith("setprice_"))
async def select_product_for_price(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    product_id = int(callback.data.replace("setprice_", ""))

    with get_db_session() as db:
        info = CoreService.get_product_info(db, product_id)
        product = info['product']

    await state.update_data(product_id=product_id)

    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        f"<b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {CURRENCY_FORMAT.format(product.cost_price)}\n"
        f"<b>–¢–µ–∫—É—â–∞—è –†–†–¶:</b> {CURRENCY_FORMAT.format(product.retail_price or 0)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_price)
    await callback.answer()

@router.message(PriceStates.waiting_for_price)
async def set_new_price(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)",
            reply_markup=keyboard
        )
        return

    data = await state.get_data()
    product_id = data['product_id']

    with get_db_session() as db:
        product = CoreService.set_retail_price(db, product_id, price, message.from_user.id)
        margin = product.margin
        margin_percent = product.margin_percent

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [get_back_button()]
    ])

    await message.reply(
        f"‚úÖ <b>–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"<b>–ù–æ–≤–∞—è –†–†–¶:</b> {CURRENCY_FORMAT.format(price)}\n"
        f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(margin)}\n"
        f"<b>–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {PERCENT_FORMAT.format(margin_percent)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.clear()

# === –í–û–ó–í–†–ê–¢–´ ===
@router.message(F.text == "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç")
async def return_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = get_cancel_back_keyboard()

    await message.reply(
        "‚Ü©Ô∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(ReturnStates.waiting_for_sale_id)

@router.message(ReturnStates.waiting_for_sale_id)
async def return_sale_id(message: Message, state: FSMContext):
    """–í–≤–æ–¥ ID –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        sale_id = int(message.text)
    except ValueError:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ)",
            reply_markup=keyboard
        )
        return

    with get_db_session() as db:
        sale = db.query(Sale).get(sale_id)

        if not sale:
            keyboard = get_cancel_back_keyboard()
            await message.reply(
                "‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=keyboard
            )
            return

        if sale.is_returned:
            keyboard = get_cancel_back_keyboard()
            await message.reply(
                "‚ùå –≠—Ç–∞ –ø—Ä–æ–¥–∞–∂–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞",
                reply_markup=keyboard
            )
            return

        await state.update_data(sale_id=sale_id)

        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ:</b>\n\n"
            f"<b>ID:</b> {sale.id}\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name} ({sale.product.size})\n"
            f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {sale.agent.full_name}\n"
            f"<b>–¶–µ–Ω–∞:</b> {CURRENCY_FORMAT.format(sale.sale_price)}\n"
            f"<b>–î–∞—Ç–∞:</b> {sale.sale_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞:"
        )

    keyboard = get_cancel_back_keyboard()

    await message.reply(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(ReturnStates.waiting_for_reason)

@router.message(ReturnStates.waiting_for_reason)
async def return_reason(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    reason = message.text
    data = await state.get_data()
    sale_id = data['sale_id']

    try:
        with get_db_session() as db:
            sale = CoreService.return_sale(db, sale_id, reason, message.from_user.id)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await message.reply(
            f"‚úÖ <b>–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name}\n"
            f"<b>–í–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥:</b> {sale.warehouse}\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:\n{str(e)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.clear()

# === –û–¢–ß–ï–¢–´ ===
@router.message(F.text == "üìä –û—Ç—á—ë—Ç—ã")
async def reports_menu(message: Message):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìà –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_sales_today")
    keyboard.button(text="üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_sales_week")
    keyboard.button(text="üìÖ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü", callback_data="report_sales_month")
    keyboard.button(text="üë• –ü–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º", callback_data="report_by_agents")
    keyboard.row(get_back_button())
    keyboard.adjust(2)

    await message.reply(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("report_"))
async def generate_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    report_type = callback.data.replace("report_", "")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    end_date = datetime.now()
    if report_type == "sales_today":
        start_date = end_date.replace(hour=0, minute=0, second=0)
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif report_type == "sales_week":
        start_date = end_date - timedelta(days=7)
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif report_type == "sales_month":
        start_date = end_date - timedelta(days=30)
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    else:
        start_date = None
        period_name = "–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"

    with get_db_session() as db:
        report = CoreService.get_sales_report(db, start_date, end_date)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    text = create_sales_report(report, period_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback.data)],
        [get_back_button()]
    ])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")
    keyboard.button(text="üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤", callback_data="manage_bonus_rules")
    keyboard.button(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")
    keyboard.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data="clear_logs")
    keyboard.row(get_back_button())
    keyboard.adjust(2)

    await message.reply(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "manage_users")
async def manage_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    with get_db_session() as db:
        agents = db.query(Agent).all()

    keyboard = InlineKeyboardBuilder()
    for agent in agents[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        status = "‚úÖ" if agent.is_active else "‚ùå"
        role = "üëë" if agent.is_admin else "üë§"
        keyboard.button(
            text=f"{status} {role} {agent.full_name}",
            callback_data=f"user_{agent.id}"
        )
    keyboard.row(get_back_button())
    keyboard.adjust(1)

    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(agents)}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {sum(1 for a in agents if a.is_active)}\n"
    text += f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {sum(1 for a in agents if a.is_admin)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "manage_bonus_rules")
async def manage_bonus_rules(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    await callback.message.edit_text(
        "üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤</b>\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "export_data")
async def export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    await callback.message.edit_text(
        "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "clear_logs")
async def clear_logs(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    await callback.message.edit_text(
        "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤</b>\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)