"""
handlers/admin_handlers.py
–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: –ø—Ä–∏–µ–º–∫–∞, —Ü–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—Ç—ã, –æ—Ç—á–µ—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""
import os
from datetime import datetime, timedelta
from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_db_session
from data.models import Agent, Sale
from services.core_service import CoreService
from config import UPLOADS_DIR, CURRENCY_FORMAT, PERCENT_FORMAT
from utils.tools import create_sales_report, render_sales_timeseries_png, render_margin_by_category_png
from handlers import (
    BatchStates, PriceStates, ReturnStates, ChartStates,
    is_admin, get_cancel_back_keyboard, get_back_button
)

router = Router()

# === –ü–†–ò–ï–ú–ö–ê –ü–ê–†–¢–ò–ô ===
@router.message(F.text == "üìÖ –ü—Ä–∏–µ–º–∫–∞ –ø–∞—Ä—Ç–∏–∏")
async def batch_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏ –ø–∞—Ä—Ç–∏–∏"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel", callback_data="download_template")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
         get_back_button()]
    ])

    await message.reply(
        "üìÖ <b>–ü—Ä–∏–µ–º–∫–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(BatchStates.waiting_for_file)

@router.callback_query(F.data == "download_template")
async def download_template(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel"""
    with get_db_session() as db:
        template_bytes = CoreService.generate_excel_template()

    file_name = f"template_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

    await callback.message.answer_document(
        types.BufferedInputFile(
            template_bytes,
            filename=file_name
        ),
        caption="üìÑ –®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    await callback.answer()

@router.message(BatchStates.waiting_for_file, F.document)
async def process_batch_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    document = message.document

    if not document.file_name.endswith(('.xlsx', '.xls')):
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)",
            reply_markup=keyboard
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    try:
        file_size = document.file_size or 0
    except Exception:
        file_size = 0

    from config import MAX_EXCEL_FILE_SIZE
    if file_size and file_size > MAX_EXCEL_FILE_SIZE:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10 MB",
            reply_markup=keyboard
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(UPLOADS_DIR, f"{message.from_user.id}_{document.file_name}")
    await message.bot.download(document, file_path)

    await state.update_data(file_path=file_path)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –ë–î –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    with get_db_session() as db:
        existing_warehouses = CoreService.get_warehouse_list(db)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    from config import DEFAULT_WAREHOUSES
    all_warehouses = list(set(existing_warehouses + DEFAULT_WAREHOUSES))

    keyboard = InlineKeyboardBuilder()
    for warehouse in all_warehouses:
        keyboard.button(text=warehouse, callback_data=f"warehouse_{warehouse}")
    keyboard.button(text="‚ûï –ù–æ–≤—ã–π —Å–∫–ª–∞–¥", callback_data="warehouse_new")
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )
    keyboard.adjust(2)

    await message.reply(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø–∞—Ä—Ç–∏–∏:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(BatchStates.waiting_for_warehouse)

@router.callback_query(BatchStates.waiting_for_warehouse, F.data.startswith("warehouse_"))
async def process_warehouse_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    warehouse = callback.data.replace("warehouse_", "")
    data = await state.get_data()
    file_path = data['file_path']

    try:
        with get_db_session() as db:
            batch, products = CoreService.create_batch_from_excel(
                db, file_path, warehouse, callback.from_user.id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            batch_number = batch.batch_number
            batch_date = batch.received_date.strftime('%d.%m.%Y %H:%M')
            products_count = len(products)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏: {batch_number}\n"
            f"üì¶ –°–∫–ª–∞–¥: {warehouse}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}\n"
            f"üìÖ –î–∞—Ç–∞: {batch_date}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)

    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:\n{str(e)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.clear()
    await callback.answer()

# === –£–°–¢–ê–ù–û–í–ö–ê –¶–ï–ù ===
@router.message(F.text == "üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")
async def price_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/EAN", callback_data="price_search_text")
    keyboard.button(text="üìÇ –§–∏–ª—å—Ç—Ä—ã (–º–∞—Å—Å–æ–≤–æ)", callback_data="price_search_filters")
    keyboard.button(text="üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="price_search_all")
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )
    keyboard.adjust(1)

    await message.reply(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n"
        "–ö–∞–∫ –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã?",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.choosing_filter)

@router.message(PriceStates.waiting_for_product)
async def search_product_for_price(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    query = message.text

    with get_db_session() as db:
        products_data = CoreService.search_products(db, query)

    if not products_data:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=keyboard
        )
        return

    keyboard = InlineKeyboardBuilder()
    for item in products_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
        product = item['product']
        text = f"{product.name} ({product.size}) - {product.ean}"
        keyboard.button(text=text, callback_data=f"setprice_{product.id}")
    keyboard.adjust(1)
    keyboard.row(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search_price"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        get_back_button()
    )

    await message.reply(
        "üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "new_search_price")
async def new_search_price(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_product)
    await callback.answer()

@router.callback_query(F.data.startswith("setprice_"))
async def select_product_for_price(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    product_id = int(callback.data.replace("setprice_", ""))

    with get_db_session() as db:
        info = CoreService.get_product_info(db, product_id)
        product = info['product']

    await state.update_data(product_id=product_id)

    keyboard = get_cancel_back_keyboard()

    await callback.message.edit_text(
        f"<b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        f"<b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {CURRENCY_FORMAT.format(product.cost_price)}\n"
        f"<b>–¢–µ–∫—É—â–∞—è –†–†–¶:</b> {CURRENCY_FORMAT.format(product.retail_price or 0)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_price)
    await callback.answer()

@router.message(PriceStates.waiting_for_price)
async def set_new_price(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)",
            reply_markup=keyboard
        )
        return

    data = await state.get_data()
    product_id = data['product_id']

    with get_db_session() as db:
        product = CoreService.set_retail_price(db, product_id, price, message.from_user.id)
        margin = product.margin
        margin_percent = product.margin_percent

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [get_back_button()]
    ])

    await message.reply(
        f"‚úÖ <b>–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"<b>–ù–æ–≤–∞—è –†–†–¶:</b> {CURRENCY_FORMAT.format(price)}\n"
        f"<b>–ú–∞—Ä–∂–∞:</b> {CURRENCY_FORMAT.format(margin)}\n"
        f"<b>–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {PERCENT_FORMAT.format(margin_percent)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.clear()

# === –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –î–õ–Ø –ú–ê–°–°–û–í–û–ô –£–°–¢–ê–ù–û–í–ö–ò ===
@router.callback_query(PriceStates.choosing_filter, F.data == "price_search_text")
async def price_search_text(callback: CallbackQuery, state: FSMContext):
    keyboard = get_cancel_back_keyboard()
    await callback.message.edit_text(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.waiting_for_product)
    await callback.answer()

@router.callback_query(PriceStates.choosing_filter, F.data == "price_search_filters")
async def price_search_filters(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∂–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ—Å—Ç–∞–≤–∫–∏ —Ü–µ–Ω"""
    keyboard = InlineKeyboardBuilder()
    with get_db_session() as db:
        available_data = CoreService.get_available_filter_values(db)

    if available_data['categories']:
        keyboard.button(text="üèí –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="price_filter_category")
    if available_data['sizes']:
        keyboard.button(text="üìè –ü–æ —Ä–∞–∑–º–µ—Ä—É", callback_data="price_filter_size")
    if available_data['ages']:
        keyboard.button(text="üë• –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="price_filter_age")
    if available_data['warehouses']:
        keyboard.button(text="üì¶ –ü–æ —Å–∫–ª–∞–¥—É", callback_data="price_filter_warehouse")
    if available_data['colors']:
        keyboard.button(text="üé® –ü–æ —Ü–≤–µ—Ç—É", callback_data="price_filter_color")

    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"),
        get_back_button()
    )
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üìÇ <b>–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(PriceStates.choosing_filter, F.data == "price_search_all")
async def price_search_all(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–ª–∏—á–∏–µ–º –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    with get_db_session() as db:
        products = CoreService.select_products_for_bulk_pricing(db, only_in_stock=True, limit=None)
        product_ids = [p.id for p in products]

    if not product_ids:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]]),
        )
        await callback.answer()
        return

    await _show_bulk_actions(callback, state, product_ids)

def _render_bulk_price_preview(products, increase_percent: float | None, new_price: float | None) -> str:
    header = "üßÆ <b>–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω</b>\n\n"
    if increase_percent is not None:
        mode_line = f"–†–µ–∂–∏–º: –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {increase_percent}%\n"
    else:
        mode_line = f"–†–µ–∂–∏–º: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã {CURRENCY_FORMAT.format(new_price or 0)}\n"
    count_line = f"–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10)\n\n"
    lines = []
    for p in products[:10]:
        old = p.retail_price or 0
        if increase_percent is not None:
            newp = round(old * (1 + increase_percent / 100), 2)
        else:
            newp = new_price or 0
        lines.append(f"‚Ä¢ {p.name} ({p.size}) ‚Äî {CURRENCY_FORMAT.format(old)} ‚Üí {CURRENCY_FORMAT.format(newp)}")
    return header + mode_line + count_line + "\n".join(lines)

async def _show_bulk_actions(callback: CallbackQuery, state: FSMContext, product_ids: list[int]):
    await state.update_data(bulk_product_ids=product_ids)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞ %", callback_data="bulk_price_percent")
    keyboard.button(text="üí≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–∫—Å. —Ü–µ–Ω—É", callback_data="bulk_price_fixed")
    keyboard.button(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="bulk_price_preview")
    keyboard.row(get_back_button())
    keyboard.adjust(2)
    await callback.message.edit_text(
        "üßÆ <b>–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("price_filter_"))
async def price_filters_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –ø–æ–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏–π"""
    data_key = callback.data.replace("price_filter_", "")
    with get_db_session() as db:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if data_key == 'category':
            options = CoreService.get_product_categories_in_stock(db)
            items = sorted(options.keys())
        elif data_key == 'size':
            options = CoreService.get_available_sizes_in_stock(db)
            items = sorted(options.keys())
        elif data_key == 'age':
            options = CoreService.get_available_ages_in_stock(db)
            items = sorted(options.keys())
        elif data_key == 'warehouse':
            options = CoreService.get_warehouses_with_stock(db)
            items = sorted(options.keys())
        elif data_key == 'color':
            items = sorted(CoreService.get_available_filter_values(db)['colors'])
        else:
            items = []

    keyboard = InlineKeyboardBuilder()
    for value in items[:60]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Å–ø–∏—Å–æ–∫
        keyboard.button(text=str(value), callback_data=f"price_pick_{data_key}_{value}")
    keyboard.row(get_back_button())
    keyboard.adjust(2)
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ({data_key})",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("price_pick_"))
async def price_pick_apply(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –º–∞—Å—Å–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    _, key, value = callback.data.split('_', 2)
    with get_db_session() as db:
        selected = CoreService.select_products_for_bulk_pricing(
            db,
            category=value if key == 'category' else None,
            size=value if key == 'size' else None,
            age=value if key == 'age' else None,
            warehouse=value if key == 'warehouse' else None,
            color=value if key == 'color' else None,
        )
        product_ids = [p.id for p in selected]

    await _show_bulk_actions(callback, state, product_ids)

@router.callback_query(F.data == "bulk_price_percent")
async def bulk_price_percent(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PriceStates.bulk_percent_input)
    keyboard = get_cancel_back_keyboard()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 7.5)",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(PriceStates.bulk_percent_input)
async def bulk_price_percent_input(message: Message, state: FSMContext):
    try:
        inc = float(message.text.replace(',', '.'))
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5 –∏–ª–∏ 7.5", reply_markup=get_cancel_back_keyboard())
        return

    data = await state.get_data()
    product_ids = data.get('bulk_product_ids', [])
    if not product_ids:
        await message.reply("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã", reply_markup=get_cancel_back_keyboard())
        return

    with get_db_session() as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(bulk_inc_percent=inc, bulk_fixed_price=None)
        changed = CoreService.bulk_update_retail_price_by_ids(
            db, product_ids, increase_percent=inc, changed_by_id=message.from_user.id
        )

    await state.clear()
    await message.reply(
        f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ —Ü–µ–Ω —É {changed} —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {inc}%)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    )

@router.callback_query(F.data == "bulk_price_fixed")
async def bulk_price_fixed(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PriceStates.bulk_fixed_input)
    keyboard = get_cancel_back_keyboard()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É (—Ä—É–±.)",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(PriceStates.bulk_fixed_input)
async def bulk_price_fixed_input(message: Message, state: FSMContext):
    try:
        new_price = float(message.text.replace(',', '.'))
        if new_price <= 0:
            raise ValueError
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ > 0)", reply_markup=get_cancel_back_keyboard())
        return

    data = await state.get_data()
    product_ids = data.get('bulk_product_ids', [])
    if not product_ids:
        await message.reply("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã", reply_markup=get_cancel_back_keyboard())
        return

    with get_db_session() as db:
        await state.update_data(bulk_inc_percent=None, bulk_fixed_price=new_price)
        changed = CoreService.bulk_update_retail_price_by_ids(
            db, product_ids, new_price=new_price, changed_by_id=message.from_user.id
        )

    await state.clear()
    await message.reply(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ {CURRENCY_FORMAT.format(new_price)} —É {changed} —Ç–æ–≤–∞—Ä–æ–≤",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    )

@router.callback_query(F.data == "bulk_price_preview")
async def bulk_price_preview(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_ids = data.get('bulk_product_ids', [])
    inc = data.get('bulk_inc_percent')
    fixed = data.get('bulk_fixed_price')

    if not product_ids:
        await callback.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return

    if inc is None and fixed is None:
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Ü–µ–Ω—É
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (–ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Ñ–∏–∫—Å. —Ü–µ–Ω—É)", show_alert=True)
        return

    with get_db_session() as db:
        preview = CoreService.preview_bulk_price_update(
            db, product_ids,
            new_price=fixed, increase_percent=inc, limit=20
        )

    if not preview:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]]))
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    lines = ["üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω</b>", "", "–¢–æ–≤–∞—Ä ‚Äî —Å—Ç–∞—Ä–∞—è ‚Üí –Ω–æ–≤–∞—è (Œî%)", ""]
    for item in preview:
        lines.append(
            f"‚Ä¢ {item['name']} ({item['size'] or '-'}): "
            f"{CURRENCY_FORMAT.format(item['old'])} ‚Üí {CURRENCY_FORMAT.format(item['new'])} "
            f"({item['diff_percent']}%)"
        )
    text = "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="bulk_price_apply")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        [get_back_button()]
    ])

    await state.set_state(PriceStates.bulk_preview_confirm)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()

@router.callback_query(PriceStates.bulk_preview_confirm, F.data == "bulk_price_apply")
async def bulk_price_apply(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_ids = data.get('bulk_product_ids', [])
    inc = data.get('bulk_inc_percent')
    fixed = data.get('bulk_fixed_price')

    if not product_ids:
        await callback.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return

    with get_db_session() as db:
        changed = CoreService.bulk_update_retail_price_by_ids(
            db, product_ids, new_price=fixed, increase_percent=inc, changed_by_id=callback.from_user.id
        )

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ {changed} —Ç–æ–≤–∞—Ä–∞–º",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    )
    await callback.answer()


# === –í–û–ó–í–†–ê–¢–´ ===
@router.message(F.text == "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç")
async def return_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = get_cancel_back_keyboard()

    await message.reply(
        "‚Ü©Ô∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(ReturnStates.waiting_for_sale_id)

@router.message(ReturnStates.waiting_for_sale_id)
async def return_sale_id(message: Message, state: FSMContext):
    """–í–≤–æ–¥ ID –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        sale_id = int(message.text)
    except ValueError:
        keyboard = get_cancel_back_keyboard()
        await message.reply(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ)",
            reply_markup=keyboard
        )
        return

    with get_db_session() as db:
        sale = db.get(Sale, sale_id)

        if not sale:
            keyboard = get_cancel_back_keyboard()
            await message.reply(
                "‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=keyboard
            )
            return

        if sale.is_returned:
            keyboard = get_cancel_back_keyboard()
            await message.reply(
                "‚ùå –≠—Ç–∞ –ø—Ä–æ–¥–∞–∂–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞",
                reply_markup=keyboard
            )
            return

        await state.update_data(sale_id=sale_id)

        text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ:</b>\n\n"
            f"<b>ID:</b> {sale.id}\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name} ({sale.product.size})\n"
            f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {sale.agent.full_name}\n"
            f"<b>–¶–µ–Ω–∞:</b> {CURRENCY_FORMAT.format(sale.sale_price)}\n"
            f"<b>–î–∞—Ç–∞:</b> {sale.sale_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞:"
        )

    keyboard = get_cancel_back_keyboard()

    await message.reply(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(ReturnStates.waiting_for_reason)

@router.message(ReturnStates.waiting_for_reason)
async def return_reason(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    reason = message.text
    data = await state.get_data()
    sale_id = data['sale_id']

    try:
        with get_db_session() as db:
            sale = CoreService.return_sale(db, sale_id, reason, message.from_user.id)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await message.reply(
            f"‚úÖ <b>–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name}\n"
            f"<b>–í–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥:</b> {sale.warehouse}\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [get_back_button()]
        ])

        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:\n{str(e)}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.clear()

# === –û–¢–ß–ï–¢–´ ===
@router.message(F.text == "üìä –û—Ç—á—ë—Ç—ã")
async def reports_menu(message: Message):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìà –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_sales_today")
    keyboard.button(text="üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_sales_week")
    keyboard.button(text="üìÖ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü", callback_data="report_sales_month")
    keyboard.button(text="üë• –ü–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º", callback_data="report_by_agents")
    keyboard.row(get_back_button())
    keyboard.adjust(2)

    await message.reply(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("report_"))
async def generate_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    report_type = callback.data.replace("report_", "")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    end_date = datetime.now()
    if report_type == "sales_today":
        start_date = end_date.replace(hour=0, minute=0, second=0)
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif report_type == "sales_week":
        start_date = end_date - timedelta(days=7)
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif report_type == "sales_month":
        start_date = end_date - timedelta(days=30)
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    else:
        start_date = None
        period_name = "–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"

    with get_db_session() as db:
        report = CoreService.get_sales_report(db, start_date, end_date)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    text = create_sales_report(report, period_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback.data)],
        [get_back_button()]
    ])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

# === –ì–†–ê–§–ò–ö–ò (–∞–¥–º–∏–Ω) ===
@router.message(F.text == "üìà –ì—Ä–∞—Ñ–∏–∫–∏")
async def charts_menu(message: Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="üìà –ü—Ä–æ–¥–∞–∂–∏: 7 –¥–Ω–µ–π", callback_data="chart_sales_7")
    kb.button(text="üìà –ü—Ä–æ–¥–∞–∂–∏: 30 –¥–Ω–µ–π", callback_data="chart_sales_30")
    kb.button(text="üìà –ü—Ä–æ–¥–∞–∂–∏: 90 –¥–Ω–µ–π", callback_data="chart_sales_90")
    kb.button(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: 30 –¥–Ω–µ–π", callback_data="chart_margin_cats_30")
    kb.button(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: 90 –¥–Ω–µ–π", callback_data="chart_margin_cats_90")
    kb.button(text="üè∑ –ü–æ —Ç–æ–≤–∞—Ä—É (–†–†–¶/–ø—Ä–æ–¥–∞–∂–∏)", callback_data="chart_product_pick")
    kb.row(get_back_button())
    kb.adjust(1)
    await message.reply("üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫:", reply_markup=kb.as_markup(), parse_mode="HTML")

@router.callback_query(F.data.in_(["chart_sales_7", "chart_sales_30", "chart_sales_90"]))
async def chart_sales_period(callback: CallbackQuery):
    mapping = {"chart_sales_7": 7, "chart_sales_30": 30, "chart_sales_90": 90}
    days = mapping.get(callback.data, 30)
    with get_db_session() as db:
        points = CoreService.get_sales_timeseries(db, days=days)
    if not points:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]]))
        await callback.answer()
        return
    png = render_sales_timeseries_png(points)
    await callback.message.answer_photo(types.BufferedInputFile(png, filename=f"sales_{days}.png"), caption=f"–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {days} –¥–Ω–µ–π")
    await callback.answer()

@router.callback_query(F.data.in_(["chart_margin_cats_30", "chart_margin_cats_90"]))
async def chart_margin_cats_period(callback: CallbackQuery):
    mapping = {"chart_margin_cats_30": 30, "chart_margin_cats_90": 90}
    days = mapping.get(callback.data, 30)
    with get_db_session() as db:
        cat_map = CoreService.get_margin_by_category(db, days=days)
    if not cat_map:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]]))
        await callback.answer()
        return
    png = render_margin_by_category_png(cat_map)
    await callback.message.answer_photo(types.BufferedInputFile(png, filename=f"margin_cats_{days}.png"), caption=f"–ú–∞—Ä–∂–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({days} –¥–Ω–µ–π)")
    await callback.answer()

@router.callback_query(F.data == "chart_product_pick")
async def chart_product_pick(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChartStates.waiting_for_product_query)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ EAN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (90 –¥–Ω–µ–π):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    )
    await callback.answer()

@router.message(StateFilter(ChartStates.waiting_for_product_query), F.text)
async def chart_product_query(message: Message, state: FSMContext):
    query = message.text
    with get_db_session() as db:
        items = CoreService.search_products(db, query)
    if not items:
        await message.reply("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å–æ–≤–ø–∞–≤—à–∏–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    product = items[0]['product']
    pid = product.id
    with get_db_session() as db:
        price_ts = CoreService.get_product_price_timeseries(db, pid, days=90)
        sales_ts = CoreService.get_product_sales_timeseries(db, pid, days=90)
    from utils.tools import render_dual_axis_price_sales_png
    png = render_dual_axis_price_sales_png(price_ts, sales_ts)
    await message.answer_photo(
        types.BufferedInputFile(png, filename=f"product_{pid}_90.png"),
        caption=f"{product.name} ‚Äî –†–†–¶ –∏ –ø—Ä–æ–¥–∞–∂–∏ (90 –¥–Ω–µ–π)"
    )
    await state.clear()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")
    keyboard.button(text="üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤", callback_data="manage_bonus_rules")
    keyboard.button(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")
    keyboard.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data="clear_logs")
    keyboard.row(get_back_button())
    keyboard.adjust(2)

    await message.reply(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "manage_users")
async def manage_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    with get_db_session() as db:
        agents = db.query(Agent).all()

    keyboard = InlineKeyboardBuilder()
    for agent in agents[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        status = "‚úÖ" if agent.is_active else "‚ùå"
        role = "üëë" if agent.is_admin else "üë§"
        keyboard.button(
            text=f"{status} {role} {agent.full_name}",
            callback_data=f"user_{agent.id}"
        )
    keyboard.row(get_back_button())
    keyboard.adjust(1)

    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(agents)}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {sum(1 for a in agents if a.is_active)}\n"
    text += f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {sum(1 for a in agents if a.is_admin)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "manage_bonus_rules")
async def manage_bonus_rules(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    await callback.message.edit_text(
        "üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤</b>\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "export_data")
async def export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    await callback.message.edit_text(
        "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "clear_logs")
async def clear_logs(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
    await callback.message.edit_text(
        "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤</b>\n\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)