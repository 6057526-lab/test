"""
handlers/__init__.py
–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
"""
from aiogram import Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from config import ADMIN_IDS

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤

# === –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class BatchStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_warehouse = State()

class PriceStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_price = State()

class SaleStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_price = State()
    confirm_sale = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    choosing_filter = State()
    filter_by_category = State()
    filter_by_size = State()
    filter_by_age = State()
    filter_by_warehouse = State()

class StockStates(StatesGroup):
    waiting_for_filters = State()

class ReturnStates(StatesGroup):
    waiting_for_sale_id = State()
    waiting_for_reason = State()

class BonusStates(StatesGroup):
    waiting_for_confirmation = State()

# === –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ===
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def get_back_button() -> InlineKeyboardButton:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" """
    return InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

def get_cancel_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –û—Ç–º–µ–Ω–∞ –∏ –ù–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [KeyboardButton(text="üìÖ –ü—Ä–∏–µ–º–∫–∞ –ø–∞—Ä—Ç–∏–∏"), KeyboardButton(text="üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")],
        [KeyboardButton(text="üöÄ –ü—Ä–æ–¥–∞–∂–∞"), KeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–∫–∏")],
        [KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å—ã"), KeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã")],
        [KeyboardButton(text="‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_seller_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    keyboard = [
        [KeyboardButton(text="üöÄ –ü—Ä–æ–¥–∞—Ç—å"), KeyboardButton(text="üì¶ –ú–æ–∏ –æ—Å—Ç–∞—Ç–∫–∏")],
        [KeyboardButton(text="üéÅ –ú–æ–π –±–æ–Ω—É—Å"), KeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def show_main_menu(message_or_callback, is_admin_user: bool = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if isinstance(message_or_callback, CallbackQuery):
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if is_admin_user is None:
            is_admin_user = is_admin(user_id)

        keyboard = get_admin_keyboard() if is_admin_user else get_seller_keyboard()
        role = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin_user else "–ø—Ä–æ–¥–∞–≤–µ—Ü"

        await message_or_callback.message.edit_text(
            f"üëã {full_name}!\n"
            f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>{role}</b>.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            parse_mode="HTML"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message_or_callback.message.answer(
            "üì± –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await message_or_callback.answer()
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id = message_or_callback.from_user.id
        if is_admin_user is None:
            is_admin_user = is_admin(user_id)

        keyboard = get_admin_keyboard() if is_admin_user else get_seller_keyboard()
        role = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin_user else "–ø—Ä–æ–¥–∞–≤–µ—Ü"

        await message_or_callback.reply(
            f"üëã {message_or_callback.from_user.full_name}!\n"
            f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>{role}</b>.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –•–ï–ù–î–õ–ï–†–û–í ===
def register_all_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from . import admin_handlers, sales_handlers, user_handlers

    user_handlers.register_handlers(dp)      # –û—Å–Ω–æ–≤–Ω—ã–µ: —Å—Ç–∞—Ä—Ç, –º–µ–Ω—é, –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    sales_handlers.register_handlers(dp)     # –ü—Ä–æ–¥–∞–∂–∏, –æ—Å—Ç–∞—Ç–∫–∏ (–æ–±—â–∏–µ)
    admin_handlers.register_handlers(dp)     # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏