"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
"""
from typing import Dict, List, Any
from datetime import datetime, timedelta
import pandas as pd
from io import BytesIO

from config import CURRENCY_FORMAT, PERCENT_FORMAT


def format_number(number: float, decimals: int = 2) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    return f"{number:,.{decimals}f}".replace(',', ' ')


def format_currency(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö"""
    return CURRENCY_FORMAT.format(amount)


def format_percent(percent: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    return PERCENT_FORMAT.format(percent)


def format_product_info(product) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    return (
        f"<b>{product.name}</b>\n"
        f"EAN: {product.ean}\n"
        f"–ú–æ–¥–µ–ª—å: {product.model}\n"
        f"–†–∞–∑–º–µ—Ä: {product.size}, –¶–≤–µ—Ç: {product.color}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {product.age}, –§–∏—Ç: {product.fit}\n"
        f"–û—Å—Ç–∞—Ç–æ–∫: {product.current_stock} —à—Ç.\n"
        f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(product.cost_price)}\n"
        f"–†–†–¶: {format_currency(product.retail_price or 0)}\n"
        f"–ú–∞—Ä–∂–∞: {format_currency(product.margin)} ({format_percent(product.margin_percent)})"
    )


def create_sales_report(report: Dict, period_name: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
    text = f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º {period_name}</b>\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += (
        f"<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {report['total_sales']}\n"
        f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(report['total_revenue'])}\n"
        f"‚Ä¢ –û–±—â–∞—è –º–∞—Ä–∂–∞: {format_currency(report['total_margin'])}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {format_percent(report['avg_margin_percent'])}\n\n"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º
    if report['agent_stats']:
        text += "<b>–ü–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º:</b>\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ
        sorted_agents = sorted(
            report['agent_stats'].items(),
            key=lambda x: x[1]['revenue'],
            reverse=True
        )

        for agent_name, stats in sorted_agents[:10]:
            text += (
                f"\n<b>{agent_name}</b>\n"
                f"‚Ä¢ –ü—Ä–æ–¥–∞–∂: {stats['sales_count']}\n"
                f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {format_currency(stats['revenue'])}\n"
                f"‚Ä¢ –ú–∞—Ä–∂–∞: {format_currency(stats['margin'])}\n"
            )

    return text


def calculate_cost_price(price_eur: float, exchange_rate: float,
                        coefficient: float, weight: float,
                        logistics_per_kg: float) -> float:
    """–†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞"""
    return price_eur * exchange_rate * coefficient + weight * logistics_per_kg


def validate_excel_data(df: pd.DataFrame, required_columns: List[str]) -> List[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    errors = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–æ–∫
    missing_cols = set(required_columns) - set(df.columns)
    if missing_cols:
        errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if 'EAN' in df.columns:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã EAN
        invalid_ean = df[df['EAN'].astype(str).str.len() != 13]
        if not invalid_ean.empty:
            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ EAN (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 13 —Å–∏–º–≤–æ–ª–æ–≤): —Å—Ç—Ä–æ–∫–∏ {invalid_ean.index.tolist()}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
    numeric_fields = ['–í–µ—Å', '–ö–æ–ª-–≤–æ', '–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ', '–ö—É—Ä—Å', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ (–Ω–∞ –∫–≥)']
    for field in numeric_fields:
        if field in df.columns:
            try:
                df[field] = pd.to_numeric(df[field])
                if (df[field] < 0).any():
                    errors.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ '{field}'")
            except:
                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ '{field}'")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—Ç–∞
    if '–§–∏—Ç' in df.columns:
        valid_fits = ['regular', 'tapered', 'wide']
        invalid_fits = df[~df['–§–∏—Ç'].str.lower().isin(valid_fits)]
        if not invalid_fits.empty:
            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {', '.join(valid_fits)}): —Å—Ç—Ä–æ–∫–∏ {invalid_fits.index.tolist()}")

    return errors


def export_stock_to_excel(stock_data: List[Dict]) -> bytes:
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Excel"""
    df = pd.DataFrame(stock_data)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    column_mapping = {
        'ean': 'EAN',
        'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
        'size': '–†–∞–∑–º–µ—Ä',
        'color': '–¶–≤–µ—Ç',
        'stock': '–û—Å—Ç–∞—Ç–æ–∫',
        'cost_price': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å',
        'retail_price': '–†–†–¶',
        'warehouse': '–°–∫–ª–∞–¥'
    }

    df = df.rename(columns=column_mapping)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    df = df.sort_values(['–°–∫–ª–∞–¥', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–†–∞–∑–º–µ—Ä'])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ bytes
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–û—Å—Ç–∞—Ç–∫–∏', index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        worksheet = writer.sheets['–û—Å—Ç–∞—Ç–∫–∏']

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width

    return output.getvalue()


def create_bonus_report(bonuses: List[Any], period_name: str = "–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥") -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–æ–Ω—É—Å–∞–º"""
    total_amount = sum(b.amount for b in bonuses)
    paid_amount = sum(b.amount for b in bonuses if b.is_paid)
    unpaid_amount = sum(b.amount for b in bonuses if not b.is_paid)

    text = (
        f"üéÅ <b>–û—Ç—á–µ—Ç –ø–æ –±–æ–Ω—É—Å–∞–º –∑–∞ {period_name}</b>\n\n"
        f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤:</b> {format_currency(total_amount)}\n"
        f"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ:</b> {format_currency(paid_amount)}\n"
        f"<b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> {format_currency(unpaid_amount)}\n\n"
        f"<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
    )

    for bonus in bonuses[:20]:
        status = "‚úÖ" if bonus.is_paid else "‚è≥"
        text += (
            f"{status} {bonus.agent.full_name}: "
            f"{format_currency(bonus.amount)} ({bonus.percent_used}%) - "
            f"{bonus.created_at.strftime('%d.%m.%Y')}\n"
        )

    if len(bonuses) > 20:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(bonuses)} –∑–∞–ø–∏—Å–µ–π</i>"

    return text


def parse_date_range(text: str) -> tuple:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    today = datetime.now()

    if "—Å–µ–≥–æ–¥–Ω—è" in text.lower():
        start = today.replace(hour=0, minute=0, second=0)
        end = today
    elif "–≤—á–µ—Ä–∞" in text.lower():
        yesterday = today - timedelta(days=1)
        start = yesterday.replace(hour=0, minute=0, second=0)
        end = yesterday.replace(hour=23, minute=59, second=59)
    elif "–Ω–µ–¥–µ–ª—è" in text.lower():
        start = today - timedelta(days=7)
        end = today
    elif "–º–µ—Å—è—Ü" in text.lower():
        start = today - timedelta(days=30)
        end = today
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        start = today - timedelta(days=30)
        end = today

    return start, end


def generate_sale_receipt(sale) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    return (
        f"üìÑ <b>–ß–ï–ö –ü–†–û–î–ê–ñ–ò</b>\n"
        f"{'=' * 30}\n"
        f"<b>–î–∞—Ç–∞:</b> {sale.sale_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"<b>‚Ññ:</b> {sale.id}\n"
        f"{'=' * 30}\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {sale.product.name}\n"
        f"<b>–†–∞–∑–º–µ—Ä:</b> {sale.product.size}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {sale.quantity} —à—Ç.\n"
        f"<b>–¶–µ–Ω–∞:</b> {format_currency(sale.sale_price)}\n"
        f"{'=' * 30}\n"
        f"<b>–ò–¢–û–ì–û:</b> {format_currency(sale.sale_price * sale.quantity)}\n"
        f"{'=' * 30}\n"
        f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {sale.agent.full_name}\n"
        f"<b>–°–∫–ª–∞–¥:</b> {sale.warehouse}\n"
    )